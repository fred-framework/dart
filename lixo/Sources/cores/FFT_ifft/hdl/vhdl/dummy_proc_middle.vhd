-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dummy_proc_middle is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    config_in_data_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    config_in_data_V_empty_n : IN STD_LOGIC;
    config_in_data_V_read : OUT STD_LOGIC;
    config_out_data_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    config_out_data_V_full_n : IN STD_LOGIC;
    config_out_data_V_write : OUT STD_LOGIC;
    st_in_data_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    st_in_data_V_empty_n : IN STD_LOGIC;
    st_in_data_V_read : OUT STD_LOGIC;
    in_r_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_r_empty_n : IN STD_LOGIC;
    in_r_read : OUT STD_LOGIC;
    out_r_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_full_n : IN STD_LOGIC;
    out_r_write : OUT STD_LOGIC );
end;


architecture behav of dummy_proc_middle is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal config_in_data_V_blk_n : STD_LOGIC;
    signal config_out_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal st_in_data_V_blk_n : STD_LOGIC;
    signal in_r_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_r_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal dir_V_fu_175_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal dir_V_reg_363 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal p_Result_s_reg_368 : STD_LOGIC_VECTOR (9 downto 0);
    signal ovflw_fu_189_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ovflw_reg_373 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_224_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_1_reg_382 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal in_read_reg_387 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_2_fu_230_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_2_reg_395 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_3_reg_401 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_244_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_10_reg_407 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_8_reg_412 : STD_LOGIC_VECTOR (14 downto 0);
    signal not_1_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_1_reg_417 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal not_s_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_s_reg_422 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_306_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_427 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal storemerge_fu_350_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal storemerge_reg_432 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_164 : STD_LOGIC_VECTOR (10 downto 0);
    signal not_dir_V_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_198_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_1_fu_275_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_fu_268_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_293_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_301_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_3_fu_319_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_1_fu_312_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_1_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_337_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_345_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((exitcond_fu_218_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0))) and (exitcond_fu_218_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((out_r_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_reg_164 <= i_1_reg_382;
            elsif (((config_out_data_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_164 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((st_in_data_V_empty_n = ap_const_logic_0) or (config_in_data_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                dir_V_reg_363 <= dir_V_fu_175_p1;
                ovflw_reg_373 <= ovflw_fu_189_p1;
                p_Result_s_reg_368 <= config_in_data_V_dout(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond_fu_218_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                i_1_reg_382 <= i_1_fu_224_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond_fu_218_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0))) and (exitcond_fu_218_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                in_read_reg_387 <= in_r_dout;
                p_Val2_2_reg_395 <= p_Val2_2_fu_230_p1;
                p_Val2_3_reg_401 <= in_r_dout(31 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ovflw_reg_373 = ap_const_lv1_1))) then
                not_1_reg_417 <= not_1_fu_258_p2;
                not_s_reg_422 <= not_s_fu_263_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((exitcond_fu_218_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0))) and (exitcond_fu_218_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (ovflw_reg_373 = ap_const_lv1_1))) then
                p_Result_8_reg_412 <= in_r_dout(30 downto 16);
                tmp_10_reg_407 <= tmp_10_fu_244_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                storemerge_reg_432 <= storemerge_fu_350_p3;
                tmp_s_reg_427 <= tmp_s_fu_306_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, config_in_data_V_empty_n, config_out_data_V_full_n, st_in_data_V_empty_n, in_r_empty_n, out_r_full_n, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond_fu_218_p2, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((st_in_data_V_empty_n = ap_const_logic_0) or (config_in_data_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((config_out_data_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((exitcond_fu_218_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0))) and (exitcond_fu_218_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((exitcond_fu_218_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0))) and (exitcond_fu_218_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((out_r_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, config_in_data_V_empty_n, st_in_data_V_empty_n)
    begin
                ap_block_state1 <= ((st_in_data_V_empty_n = ap_const_logic_0) or (config_in_data_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state3_assign_proc : process(in_r_empty_n, exitcond_fu_218_p2)
    begin
                ap_block_state3 <= ((exitcond_fu_218_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, in_r_empty_n, ap_CS_fsm_state3, exitcond_fu_218_p2)
    begin
        if ((not(((exitcond_fu_218_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0))) and (exitcond_fu_218_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    config_in_data_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, config_in_data_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            config_in_data_V_blk_n <= config_in_data_V_empty_n;
        else 
            config_in_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    config_in_data_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, config_in_data_V_empty_n, st_in_data_V_empty_n)
    begin
        if ((not(((st_in_data_V_empty_n = ap_const_logic_0) or (config_in_data_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            config_in_data_V_read <= ap_const_logic_1;
        else 
            config_in_data_V_read <= ap_const_logic_0;
        end if; 
    end process;


    config_out_data_V_blk_n_assign_proc : process(config_out_data_V_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            config_out_data_V_blk_n <= config_out_data_V_full_n;
        else 
            config_out_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    config_out_data_V_din <= (ap_const_lv16_0(15 downto 11) & tmp_fu_198_p3);

    config_out_data_V_write_assign_proc : process(config_out_data_V_full_n, ap_CS_fsm_state2)
    begin
        if (((config_out_data_V_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            config_out_data_V_write <= ap_const_logic_1;
        else 
            config_out_data_V_write <= ap_const_logic_0;
        end if; 
    end process;

    dir_V_fu_175_p1 <= config_in_data_V_dout(1 - 1 downto 0);
    exitcond_fu_218_p2 <= "1" when (i_reg_164 = ap_const_lv11_400) else "0";
    i_1_fu_224_p2 <= std_logic_vector(unsigned(i_reg_164) + unsigned(ap_const_lv11_1));

    in_r_blk_n_assign_proc : process(in_r_empty_n, ap_CS_fsm_state3, exitcond_fu_218_p2)
    begin
        if (((exitcond_fu_218_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            in_r_blk_n <= in_r_empty_n;
        else 
            in_r_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_r_read_assign_proc : process(in_r_empty_n, ap_CS_fsm_state3, exitcond_fu_218_p2)
    begin
        if ((not(((exitcond_fu_218_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0))) and (exitcond_fu_218_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            in_r_read <= ap_const_logic_1;
        else 
            in_r_read <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(in_r_empty_n, ap_CS_fsm_state3, exitcond_fu_218_p2)
    begin
        if ((not(((exitcond_fu_218_p2 = ap_const_lv1_0) and (in_r_empty_n = ap_const_logic_0))) and (exitcond_fu_218_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    not_1_fu_258_p2 <= "0" when (tmp_10_reg_407 = ap_const_lv15_0) else "1";
    not_dir_V_fu_193_p2 <= (dir_V_reg_363 xor ap_const_lv1_1);
    not_s_fu_263_p2 <= "0" when (p_Result_8_reg_412 = ap_const_lv15_0) else "1";

    out_r_blk_n_assign_proc : process(out_r_full_n, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            out_r_blk_n <= out_r_full_n;
        else 
            out_r_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_din <= (storemerge_reg_432 & tmp_s_reg_427);

    out_r_write_assign_proc : process(out_r_full_n, ap_CS_fsm_state6)
    begin
        if (((out_r_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            out_r_write <= ap_const_logic_1;
        else 
            out_r_write <= ap_const_logic_0;
        end if; 
    end process;

    ovflw_fu_189_p1 <= st_in_data_V_dout(1 - 1 downto 0);
    p_1_fu_326_p2 <= (p_Result_3_fu_319_p3 and not_s_reg_422);
    p_Result_1_fu_275_p3 <= in_read_reg_387(15 downto 15);
    p_Result_3_fu_319_p3 <= in_read_reg_387(31 downto 31);
    p_Result_5_fu_287_p2 <= (ret_V_fu_268_p3 xor p_s_fu_282_p2);
    p_Result_6_fu_331_p2 <= (ret_V_1_fu_312_p3 xor p_1_fu_326_p2);
    p_Val2_2_fu_230_p1 <= in_r_dout(16 - 1 downto 0);
    p_s_fu_282_p2 <= (p_Result_1_fu_275_p3 and not_1_reg_417);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    ret_V_1_fu_312_p3 <= in_read_reg_387(31 downto 31);
    ret_V_fu_268_p3 <= in_read_reg_387(15 downto 15);

    st_in_data_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, st_in_data_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            st_in_data_V_blk_n <= st_in_data_V_empty_n;
        else 
            st_in_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    st_in_data_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, config_in_data_V_empty_n, st_in_data_V_empty_n)
    begin
        if ((not(((st_in_data_V_empty_n = ap_const_logic_0) or (config_in_data_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            st_in_data_V_read <= ap_const_logic_1;
        else 
            st_in_data_V_read <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    storemerge_fu_350_p3 <= 
        tmp_1_fu_345_p2 when (ovflw_reg_373(0) = '1') else 
        p_Val2_3_reg_401;
    tmp_10_fu_244_p1 <= in_r_dout(15 - 1 downto 0);
    tmp_1_fu_345_p2 <= std_logic_vector(unsigned(p_Val2_3_reg_401) - unsigned(tmp_6_fu_337_p3));
    tmp_6_fu_337_p3 <= (p_Result_6_fu_331_p2 & ap_const_lv15_0);
    tmp_8_fu_293_p3 <= (p_Result_5_fu_287_p2 & ap_const_lv15_0);
    tmp_9_fu_301_p2 <= std_logic_vector(unsigned(p_Val2_2_reg_395) - unsigned(tmp_8_fu_293_p3));
    tmp_fu_198_p3 <= (p_Result_s_reg_368 & not_dir_V_fu_193_p2);
    tmp_s_fu_306_p3 <= 
        tmp_9_fu_301_p2 when (ovflw_reg_373(0) = '1') else 
        p_Val2_2_reg_395;
end behav;
