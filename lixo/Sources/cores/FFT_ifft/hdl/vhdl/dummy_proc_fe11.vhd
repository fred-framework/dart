-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dummy_proc_fe11 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    direction : IN STD_LOGIC_VECTOR (0 downto 0);
    config_data_V_2_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    config_data_V_2_full_n : IN STD_LOGIC;
    config_data_V_2_write : OUT STD_LOGIC;
    config_data_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    config_data_V_full_n : IN STD_LOGIC;
    config_data_V_write : OUT STD_LOGIC;
    m_axi_in_M_real_V_AWVALID : OUT STD_LOGIC;
    m_axi_in_M_real_V_AWREADY : IN STD_LOGIC;
    m_axi_in_M_real_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_in_M_real_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_M_real_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_in_M_real_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_M_real_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_M_real_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_M_real_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_M_real_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_M_real_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_M_real_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_M_real_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_M_real_V_WVALID : OUT STD_LOGIC;
    m_axi_in_M_real_V_WREADY : IN STD_LOGIC;
    m_axi_in_M_real_V_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_in_M_real_V_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_M_real_V_WLAST : OUT STD_LOGIC;
    m_axi_in_M_real_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_M_real_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_M_real_V_ARVALID : OUT STD_LOGIC;
    m_axi_in_M_real_V_ARREADY : IN STD_LOGIC;
    m_axi_in_M_real_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_in_M_real_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_M_real_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_in_M_real_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_M_real_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_M_real_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_M_real_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_M_real_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_M_real_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_M_real_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_M_real_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_M_real_V_RVALID : IN STD_LOGIC;
    m_axi_in_M_real_V_RREADY : OUT STD_LOGIC;
    m_axi_in_M_real_V_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_in_M_real_V_RLAST : IN STD_LOGIC;
    m_axi_in_M_real_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_M_real_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_M_real_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_M_real_V_BVALID : IN STD_LOGIC;
    m_axi_in_M_real_V_BREADY : OUT STD_LOGIC;
    m_axi_in_M_real_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_M_real_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_in_M_real_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_M_real_V_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    in_M_imag_V_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    out_r_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_full_n : IN STD_LOGIC;
    out_r_write : OUT STD_LOGIC;
    out_M_real_V : IN STD_LOGIC_VECTOR (31 downto 0);
    out_M_imag_V : IN STD_LOGIC_VECTOR (31 downto 0);
    out_M_real_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_M_real_V_out_full_n : IN STD_LOGIC;
    out_M_real_V_out_write : OUT STD_LOGIC;
    out_M_imag_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_M_imag_V_out_full_n : IN STD_LOGIC;
    out_M_imag_V_out_write : OUT STD_LOGIC );
end;


architecture behav of dummy_proc_fe11 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv10_2AB : STD_LOGIC_VECTOR (9 downto 0) := "1010101011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal config_data_V_2_blk_n : STD_LOGIC;
    signal config_data_V_blk_n : STD_LOGIC;
    signal in_M_real_V_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal in_M_real_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal out_r_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal out_M_real_V_out_blk_n : STD_LOGIC;
    signal out_M_imag_V_out_blk_n : STD_LOGIC;
    signal sext_cast_i_i_fu_276_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_cast_i_i_reg_347 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal sext6_cast_i_i_fu_290_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext6_cast_i_i_reg_352 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_300_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_360 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal in_M_real_V_addr_reg_365 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_i_i_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_M_real_V_addr_1_reg_371 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_M_real_V_addr_re_reg_377 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_M_real_V_addr_1_s_reg_382 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_i_i_reg_233 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum3_cast_i_i_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum9_cast_i_i_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_in_M_real_V_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_in_M_real_V_ARREADY : STD_LOGIC;
    signal p_Result_s_fu_252_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_i_i_fu_244_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_266_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_13_fu_280_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_cast_i_i_fu_306_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum3_i_i_fu_310_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum9_i_i_fu_325_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_i_i_fu_294_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_in_M_real_V_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_in_M_real_V_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_sig_ioackin_m_axi_in_M_real_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_sig_ioackin_m_axi_in_M_real_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    ap_reg_ioackin_m_axi_in_M_real_V_ARREADY <= ap_const_logic_0;
                elsif ((((m_axi_in_M_real_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((m_axi_in_M_real_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    ap_reg_ioackin_m_axi_in_M_real_V_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i_i_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (out_r_full_n = ap_const_logic_1))) then 
                i_i_i_reg_233 <= i_reg_360;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (config_data_V_full_n = ap_const_logic_0) or (config_data_V_2_full_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (out_M_imag_V_out_full_n = ap_const_logic_0) or (out_M_real_V_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_i_i_reg_233 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_360 <= i_fu_300_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_i_i_fu_294_p2 = ap_const_lv1_0))) then
                in_M_real_V_addr_1_reg_371 <= sum9_cast_i_i_fu_330_p1(32 - 1 downto 0);
                in_M_real_V_addr_reg_365 <= sum3_cast_i_i_fu_315_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_in_M_real_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                in_M_real_V_addr_1_s_reg_382 <= m_axi_in_M_real_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_in_M_real_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                in_M_real_V_addr_re_reg_377 <= m_axi_in_M_real_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (config_data_V_full_n = ap_const_logic_0) or (config_data_V_2_full_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (out_M_imag_V_out_full_n = ap_const_logic_0) or (out_M_real_V_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    sext6_cast_i_i_reg_352(30 downto 0) <= sext6_cast_i_i_fu_290_p1(30 downto 0);
                    sext_cast_i_i_reg_347(30 downto 0) <= sext_cast_i_i_fu_276_p1(30 downto 0);
            end if;
        end if;
    end process;
    sext_cast_i_i_reg_347(31) <= '0';
    sext6_cast_i_i_reg_352(31) <= '0';

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, config_data_V_2_full_n, config_data_V_full_n, m_axi_in_M_real_V_RVALID, out_r_full_n, out_M_real_V_out_full_n, out_M_imag_V_out_full_n, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state2, exitcond_i_i_fu_294_p2, ap_sig_ioackin_m_axi_in_M_real_V_ARREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (config_data_V_full_n = ap_const_logic_0) or (config_data_V_2_full_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (out_M_imag_V_out_full_n = ap_const_logic_0) or (out_M_real_V_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_i_i_fu_294_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_sig_ioackin_m_axi_in_M_real_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_sig_ioackin_m_axi_in_M_real_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((m_axi_in_M_real_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((m_axi_in_M_real_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (out_r_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, config_data_V_2_full_n, config_data_V_full_n, out_M_real_V_out_full_n, out_M_imag_V_out_full_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (config_data_V_full_n = ap_const_logic_0) or (config_data_V_2_full_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (out_M_imag_V_out_full_n = ap_const_logic_0) or (out_M_real_V_out_full_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, exitcond_i_i_fu_294_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_i_i_fu_294_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    ap_sig_ioackin_m_axi_in_M_real_V_ARREADY_assign_proc : process(m_axi_in_M_real_V_ARREADY, ap_reg_ioackin_m_axi_in_M_real_V_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_in_M_real_V_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_in_M_real_V_ARREADY <= m_axi_in_M_real_V_ARREADY;
        else 
            ap_sig_ioackin_m_axi_in_M_real_V_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    config_data_V_2_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, config_data_V_2_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            config_data_V_2_blk_n <= config_data_V_2_full_n;
        else 
            config_data_V_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    config_data_V_2_din <= p_Result_s_fu_252_p5;

    config_data_V_2_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, config_data_V_2_full_n, config_data_V_full_n, out_M_real_V_out_full_n, out_M_imag_V_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (config_data_V_full_n = ap_const_logic_0) or (config_data_V_2_full_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (out_M_imag_V_out_full_n = ap_const_logic_0) or (out_M_real_V_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            config_data_V_2_write <= ap_const_logic_1;
        else 
            config_data_V_2_write <= ap_const_logic_0;
        end if; 
    end process;


    config_data_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, config_data_V_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            config_data_V_blk_n <= config_data_V_full_n;
        else 
            config_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    config_data_V_din <= p_Result_s_fu_252_p5;

    config_data_V_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, config_data_V_2_full_n, config_data_V_full_n, out_M_real_V_out_full_n, out_M_imag_V_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (config_data_V_full_n = ap_const_logic_0) or (config_data_V_2_full_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (out_M_imag_V_out_full_n = ap_const_logic_0) or (out_M_real_V_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            config_data_V_write <= ap_const_logic_1;
        else 
            config_data_V_write <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i_i_fu_294_p2 <= "1" when (i_i_i_reg_233 = ap_const_lv11_400) else "0";
    i_fu_300_p2 <= std_logic_vector(unsigned(i_i_i_reg_233) + unsigned(ap_const_lv11_1));

    in_M_real_V_blk_n_AR_assign_proc : process(m_axi_in_M_real_V_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            in_M_real_V_blk_n_AR <= m_axi_in_M_real_V_ARREADY;
        else 
            in_M_real_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    in_M_real_V_blk_n_R_assign_proc : process(m_axi_in_M_real_V_RVALID, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            in_M_real_V_blk_n_R <= m_axi_in_M_real_V_RVALID;
        else 
            in_M_real_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_i_i_fu_294_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_i_i_fu_294_p2 = ap_const_lv1_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_in_M_real_V_ARADDR_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, in_M_real_V_addr_reg_365, in_M_real_V_addr_1_reg_371, ap_reg_ioackin_m_axi_in_M_real_V_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_in_M_real_V_ARREADY = ap_const_logic_0)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                m_axi_in_M_real_V_ARADDR <= in_M_real_V_addr_1_reg_371;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                m_axi_in_M_real_V_ARADDR <= in_M_real_V_addr_reg_365;
            else 
                m_axi_in_M_real_V_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_in_M_real_V_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_in_M_real_V_ARBURST <= ap_const_lv2_0;
    m_axi_in_M_real_V_ARCACHE <= ap_const_lv4_0;
    m_axi_in_M_real_V_ARID <= ap_const_lv1_0;
    m_axi_in_M_real_V_ARLEN <= ap_const_lv32_1;
    m_axi_in_M_real_V_ARLOCK <= ap_const_lv2_0;
    m_axi_in_M_real_V_ARPROT <= ap_const_lv3_0;
    m_axi_in_M_real_V_ARQOS <= ap_const_lv4_0;
    m_axi_in_M_real_V_ARREGION <= ap_const_lv4_0;
    m_axi_in_M_real_V_ARSIZE <= ap_const_lv3_0;
    m_axi_in_M_real_V_ARUSER <= ap_const_lv1_0;

    m_axi_in_M_real_V_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_reg_ioackin_m_axi_in_M_real_V_ARREADY)
    begin
        if ((((ap_reg_ioackin_m_axi_in_M_real_V_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_reg_ioackin_m_axi_in_M_real_V_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axi_in_M_real_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_in_M_real_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_in_M_real_V_AWADDR <= ap_const_lv32_0;
    m_axi_in_M_real_V_AWBURST <= ap_const_lv2_0;
    m_axi_in_M_real_V_AWCACHE <= ap_const_lv4_0;
    m_axi_in_M_real_V_AWID <= ap_const_lv1_0;
    m_axi_in_M_real_V_AWLEN <= ap_const_lv32_0;
    m_axi_in_M_real_V_AWLOCK <= ap_const_lv2_0;
    m_axi_in_M_real_V_AWPROT <= ap_const_lv3_0;
    m_axi_in_M_real_V_AWQOS <= ap_const_lv4_0;
    m_axi_in_M_real_V_AWREGION <= ap_const_lv4_0;
    m_axi_in_M_real_V_AWSIZE <= ap_const_lv3_0;
    m_axi_in_M_real_V_AWUSER <= ap_const_lv1_0;
    m_axi_in_M_real_V_AWVALID <= ap_const_logic_0;
    m_axi_in_M_real_V_BREADY <= ap_const_logic_0;

    m_axi_in_M_real_V_RREADY_assign_proc : process(m_axi_in_M_real_V_RVALID, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((((m_axi_in_M_real_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((m_axi_in_M_real_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            m_axi_in_M_real_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_in_M_real_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_in_M_real_V_WDATA <= ap_const_lv16_0;
    m_axi_in_M_real_V_WID <= ap_const_lv1_0;
    m_axi_in_M_real_V_WLAST <= ap_const_logic_0;
    m_axi_in_M_real_V_WSTRB <= ap_const_lv2_0;
    m_axi_in_M_real_V_WUSER <= ap_const_lv1_0;
    m_axi_in_M_real_V_WVALID <= ap_const_logic_0;

    out_M_imag_V_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, out_M_imag_V_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_M_imag_V_out_blk_n <= out_M_imag_V_out_full_n;
        else 
            out_M_imag_V_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_M_imag_V_out_din <= out_M_imag_V;

    out_M_imag_V_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, config_data_V_2_full_n, config_data_V_full_n, out_M_real_V_out_full_n, out_M_imag_V_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (config_data_V_full_n = ap_const_logic_0) or (config_data_V_2_full_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (out_M_imag_V_out_full_n = ap_const_logic_0) or (out_M_real_V_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_M_imag_V_out_write <= ap_const_logic_1;
        else 
            out_M_imag_V_out_write <= ap_const_logic_0;
        end if; 
    end process;


    out_M_real_V_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, out_M_real_V_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_M_real_V_out_blk_n <= out_M_real_V_out_full_n;
        else 
            out_M_real_V_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_M_real_V_out_din <= out_M_real_V;

    out_M_real_V_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, config_data_V_2_full_n, config_data_V_full_n, out_M_real_V_out_full_n, out_M_imag_V_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (config_data_V_full_n = ap_const_logic_0) or (config_data_V_2_full_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (out_M_imag_V_out_full_n = ap_const_logic_0) or (out_M_real_V_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_M_real_V_out_write <= ap_const_logic_1;
        else 
            out_M_real_V_out_write <= ap_const_logic_0;
        end if; 
    end process;


    out_r_blk_n_assign_proc : process(out_r_full_n, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            out_r_blk_n <= out_r_full_n;
        else 
            out_r_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_din <= (in_M_real_V_addr_1_s_reg_382 & in_M_real_V_addr_re_reg_377);

    out_r_write_assign_proc : process(out_r_full_n, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (out_r_full_n = ap_const_logic_1))) then 
            out_r_write <= ap_const_logic_1;
        else 
            out_r_write <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_s_fu_252_p5 <= (ap_const_lv16_0(15 downto 11) & tmp_6_i_i_fu_244_p3);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    sext6_cast_i_i_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_280_p4),32));
    sext_cast_i_i_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_266_p4),32));
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sum3_cast_i_i_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum3_i_i_fu_310_p2),64));
    sum3_i_i_fu_310_p2 <= std_logic_vector(unsigned(sext_cast_i_i_reg_347) + unsigned(tmp_cast_i_i_fu_306_p1));
    sum9_cast_i_i_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum9_i_i_fu_325_p2),64));
    sum9_i_i_fu_325_p2 <= std_logic_vector(unsigned(sext6_cast_i_i_reg_352) + unsigned(tmp_cast_i_i_fu_306_p1));
    tmp_13_fu_280_p4 <= in_M_imag_V_offset(31 downto 1);
    tmp_6_i_i_fu_244_p3 <= (ap_const_lv10_2AB & direction);
    tmp_cast_i_i_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_i_reg_233),32));
    tmp_fu_266_p4 <= in_M_real_V_offset(31 downto 1);
end behav;
