// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dummy_proc_fe11 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        direction,
        config_data_V_2_din,
        config_data_V_2_full_n,
        config_data_V_2_write,
        config_data_V_din,
        config_data_V_full_n,
        config_data_V_write,
        m_axi_in_M_real_V_AWVALID,
        m_axi_in_M_real_V_AWREADY,
        m_axi_in_M_real_V_AWADDR,
        m_axi_in_M_real_V_AWID,
        m_axi_in_M_real_V_AWLEN,
        m_axi_in_M_real_V_AWSIZE,
        m_axi_in_M_real_V_AWBURST,
        m_axi_in_M_real_V_AWLOCK,
        m_axi_in_M_real_V_AWCACHE,
        m_axi_in_M_real_V_AWPROT,
        m_axi_in_M_real_V_AWQOS,
        m_axi_in_M_real_V_AWREGION,
        m_axi_in_M_real_V_AWUSER,
        m_axi_in_M_real_V_WVALID,
        m_axi_in_M_real_V_WREADY,
        m_axi_in_M_real_V_WDATA,
        m_axi_in_M_real_V_WSTRB,
        m_axi_in_M_real_V_WLAST,
        m_axi_in_M_real_V_WID,
        m_axi_in_M_real_V_WUSER,
        m_axi_in_M_real_V_ARVALID,
        m_axi_in_M_real_V_ARREADY,
        m_axi_in_M_real_V_ARADDR,
        m_axi_in_M_real_V_ARID,
        m_axi_in_M_real_V_ARLEN,
        m_axi_in_M_real_V_ARSIZE,
        m_axi_in_M_real_V_ARBURST,
        m_axi_in_M_real_V_ARLOCK,
        m_axi_in_M_real_V_ARCACHE,
        m_axi_in_M_real_V_ARPROT,
        m_axi_in_M_real_V_ARQOS,
        m_axi_in_M_real_V_ARREGION,
        m_axi_in_M_real_V_ARUSER,
        m_axi_in_M_real_V_RVALID,
        m_axi_in_M_real_V_RREADY,
        m_axi_in_M_real_V_RDATA,
        m_axi_in_M_real_V_RLAST,
        m_axi_in_M_real_V_RID,
        m_axi_in_M_real_V_RUSER,
        m_axi_in_M_real_V_RRESP,
        m_axi_in_M_real_V_BVALID,
        m_axi_in_M_real_V_BREADY,
        m_axi_in_M_real_V_BRESP,
        m_axi_in_M_real_V_BID,
        m_axi_in_M_real_V_BUSER,
        in_M_real_V_offset,
        in_M_imag_V_offset,
        out_r_din,
        out_r_full_n,
        out_r_write,
        out_M_real_V,
        out_M_imag_V,
        out_M_real_V_out_din,
        out_M_real_V_out_full_n,
        out_M_real_V_out_write,
        out_M_imag_V_out_din,
        out_M_imag_V_out_full_n,
        out_M_imag_V_out_write
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;
parameter    ap_const_lv16_0 = 16'd0;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [0:0] direction;
output  [15:0] config_data_V_2_din;
input   config_data_V_2_full_n;
output   config_data_V_2_write;
output  [15:0] config_data_V_din;
input   config_data_V_full_n;
output   config_data_V_write;
output   m_axi_in_M_real_V_AWVALID;
input   m_axi_in_M_real_V_AWREADY;
output  [31:0] m_axi_in_M_real_V_AWADDR;
output  [0:0] m_axi_in_M_real_V_AWID;
output  [31:0] m_axi_in_M_real_V_AWLEN;
output  [2:0] m_axi_in_M_real_V_AWSIZE;
output  [1:0] m_axi_in_M_real_V_AWBURST;
output  [1:0] m_axi_in_M_real_V_AWLOCK;
output  [3:0] m_axi_in_M_real_V_AWCACHE;
output  [2:0] m_axi_in_M_real_V_AWPROT;
output  [3:0] m_axi_in_M_real_V_AWQOS;
output  [3:0] m_axi_in_M_real_V_AWREGION;
output  [0:0] m_axi_in_M_real_V_AWUSER;
output   m_axi_in_M_real_V_WVALID;
input   m_axi_in_M_real_V_WREADY;
output  [15:0] m_axi_in_M_real_V_WDATA;
output  [1:0] m_axi_in_M_real_V_WSTRB;
output   m_axi_in_M_real_V_WLAST;
output  [0:0] m_axi_in_M_real_V_WID;
output  [0:0] m_axi_in_M_real_V_WUSER;
output   m_axi_in_M_real_V_ARVALID;
input   m_axi_in_M_real_V_ARREADY;
output  [31:0] m_axi_in_M_real_V_ARADDR;
output  [0:0] m_axi_in_M_real_V_ARID;
output  [31:0] m_axi_in_M_real_V_ARLEN;
output  [2:0] m_axi_in_M_real_V_ARSIZE;
output  [1:0] m_axi_in_M_real_V_ARBURST;
output  [1:0] m_axi_in_M_real_V_ARLOCK;
output  [3:0] m_axi_in_M_real_V_ARCACHE;
output  [2:0] m_axi_in_M_real_V_ARPROT;
output  [3:0] m_axi_in_M_real_V_ARQOS;
output  [3:0] m_axi_in_M_real_V_ARREGION;
output  [0:0] m_axi_in_M_real_V_ARUSER;
input   m_axi_in_M_real_V_RVALID;
output   m_axi_in_M_real_V_RREADY;
input  [15:0] m_axi_in_M_real_V_RDATA;
input   m_axi_in_M_real_V_RLAST;
input  [0:0] m_axi_in_M_real_V_RID;
input  [0:0] m_axi_in_M_real_V_RUSER;
input  [1:0] m_axi_in_M_real_V_RRESP;
input   m_axi_in_M_real_V_BVALID;
output   m_axi_in_M_real_V_BREADY;
input  [1:0] m_axi_in_M_real_V_BRESP;
input  [0:0] m_axi_in_M_real_V_BID;
input  [0:0] m_axi_in_M_real_V_BUSER;
input  [31:0] in_M_real_V_offset;
input  [31:0] in_M_imag_V_offset;
output  [31:0] out_r_din;
input   out_r_full_n;
output   out_r_write;
input  [31:0] out_M_real_V;
input  [31:0] out_M_imag_V;
output  [31:0] out_M_real_V_out_din;
input   out_M_real_V_out_full_n;
output   out_M_real_V_out_write;
output  [31:0] out_M_imag_V_out_din;
input   out_M_imag_V_out_full_n;
output   out_M_imag_V_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg config_data_V_2_write;
reg config_data_V_write;
reg m_axi_in_M_real_V_ARVALID;
reg[31:0] m_axi_in_M_real_V_ARADDR;
reg m_axi_in_M_real_V_RREADY;
reg out_r_write;
reg out_M_real_V_out_write;
reg out_M_imag_V_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    config_data_V_2_blk_n;
reg    config_data_V_blk_n;
reg    in_M_real_V_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    in_M_real_V_blk_n_R;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state11;
reg    out_r_blk_n;
wire    ap_CS_fsm_state12;
reg    out_M_real_V_out_blk_n;
reg    out_M_imag_V_out_blk_n;
wire   [31:0] sext_cast_i_i_fu_276_p1;
reg   [31:0] sext_cast_i_i_reg_347;
reg    ap_block_state1;
wire   [31:0] sext6_cast_i_i_fu_290_p1;
reg   [31:0] sext6_cast_i_i_reg_352;
wire   [10:0] i_fu_300_p2;
reg   [10:0] i_reg_360;
wire    ap_CS_fsm_state2;
reg   [31:0] in_M_real_V_addr_reg_365;
wire   [0:0] exitcond_i_i_fu_294_p2;
reg   [31:0] in_M_real_V_addr_1_reg_371;
reg   [15:0] in_M_real_V_addr_re_reg_377;
reg   [15:0] in_M_real_V_addr_1_s_reg_382;
reg   [10:0] i_i_i_reg_233;
wire   [63:0] sum3_cast_i_i_fu_315_p1;
wire   [63:0] sum9_cast_i_i_fu_330_p1;
reg    ap_reg_ioackin_m_axi_in_M_real_V_ARREADY;
reg    ap_sig_ioackin_m_axi_in_M_real_V_ARREADY;
wire   [15:0] p_Result_s_fu_252_p5;
wire   [10:0] tmp_6_i_i_fu_244_p3;
wire   [30:0] tmp_fu_266_p4;
wire   [30:0] tmp_13_fu_280_p4;
wire   [31:0] tmp_cast_i_i_fu_306_p1;
wire   [31:0] sum3_i_i_fu_310_p2;
wire   [31:0] sum9_i_i_fu_325_p2;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 12'd1;
#0 ap_reg_ioackin_m_axi_in_M_real_V_ARREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond_i_i_fu_294_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_in_M_real_V_ARREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_m_axi_in_M_real_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((ap_sig_ioackin_m_axi_in_M_real_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
            ap_reg_ioackin_m_axi_in_M_real_V_ARREADY <= 1'b0;
        end else if ((((m_axi_in_M_real_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((m_axi_in_M_real_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
            ap_reg_ioackin_m_axi_in_M_real_V_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (out_r_full_n == 1'b1))) begin
        i_i_i_reg_233 <= i_reg_360;
    end else if ((~((ap_done_reg == 1'b1) | (config_data_V_full_n == 1'b0) | (config_data_V_2_full_n == 1'b0) | (real_start == 1'b0) | (out_M_imag_V_out_full_n == 1'b0) | (out_M_real_V_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_i_i_reg_233 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_360 <= i_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_i_i_fu_294_p2 == 1'd0))) begin
        in_M_real_V_addr_1_reg_371 <= sum9_cast_i_i_fu_330_p1;
        in_M_real_V_addr_reg_365 <= sum3_cast_i_i_fu_315_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_in_M_real_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        in_M_real_V_addr_1_s_reg_382 <= m_axi_in_M_real_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_in_M_real_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        in_M_real_V_addr_re_reg_377 <= m_axi_in_M_real_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (config_data_V_full_n == 1'b0) | (config_data_V_2_full_n == 1'b0) | (real_start == 1'b0) | (out_M_imag_V_out_full_n == 1'b0) | (out_M_real_V_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        sext6_cast_i_i_reg_352[30 : 0] <= sext6_cast_i_i_fu_290_p1[30 : 0];
        sext_cast_i_i_reg_347[30 : 0] <= sext_cast_i_i_fu_276_p1[30 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_i_i_fu_294_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_in_M_real_V_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_in_M_real_V_ARREADY = m_axi_in_M_real_V_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_in_M_real_V_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        config_data_V_2_blk_n = config_data_V_2_full_n;
    end else begin
        config_data_V_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (config_data_V_full_n == 1'b0) | (config_data_V_2_full_n == 1'b0) | (real_start == 1'b0) | (out_M_imag_V_out_full_n == 1'b0) | (out_M_real_V_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        config_data_V_2_write = 1'b1;
    end else begin
        config_data_V_2_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        config_data_V_blk_n = config_data_V_full_n;
    end else begin
        config_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (config_data_V_full_n == 1'b0) | (config_data_V_2_full_n == 1'b0) | (real_start == 1'b0) | (out_M_imag_V_out_full_n == 1'b0) | (out_M_real_V_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        config_data_V_write = 1'b1;
    end else begin
        config_data_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        in_M_real_V_blk_n_AR = m_axi_in_M_real_V_ARREADY;
    end else begin
        in_M_real_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        in_M_real_V_blk_n_R = m_axi_in_M_real_V_RVALID;
    end else begin
        in_M_real_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_i_i_fu_294_p2 == 1'd1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_in_M_real_V_ARREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            m_axi_in_M_real_V_ARADDR = in_M_real_V_addr_1_reg_371;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            m_axi_in_M_real_V_ARADDR = in_M_real_V_addr_reg_365;
        end else begin
            m_axi_in_M_real_V_ARADDR = 'bx;
        end
    end else begin
        m_axi_in_M_real_V_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_m_axi_in_M_real_V_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state4)) | ((ap_reg_ioackin_m_axi_in_M_real_V_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3)))) begin
        m_axi_in_M_real_V_ARVALID = 1'b1;
    end else begin
        m_axi_in_M_real_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((m_axi_in_M_real_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((m_axi_in_M_real_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10)))) begin
        m_axi_in_M_real_V_RREADY = 1'b1;
    end else begin
        m_axi_in_M_real_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_M_imag_V_out_blk_n = out_M_imag_V_out_full_n;
    end else begin
        out_M_imag_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (config_data_V_full_n == 1'b0) | (config_data_V_2_full_n == 1'b0) | (real_start == 1'b0) | (out_M_imag_V_out_full_n == 1'b0) | (out_M_real_V_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_M_imag_V_out_write = 1'b1;
    end else begin
        out_M_imag_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_M_real_V_out_blk_n = out_M_real_V_out_full_n;
    end else begin
        out_M_real_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (config_data_V_full_n == 1'b0) | (config_data_V_2_full_n == 1'b0) | (real_start == 1'b0) | (out_M_imag_V_out_full_n == 1'b0) | (out_M_real_V_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_M_real_V_out_write = 1'b1;
    end else begin
        out_M_real_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        out_r_blk_n = out_r_full_n;
    end else begin
        out_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (out_r_full_n == 1'b1))) begin
        out_r_write = 1'b1;
    end else begin
        out_r_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (config_data_V_full_n == 1'b0) | (config_data_V_2_full_n == 1'b0) | (real_start == 1'b0) | (out_M_imag_V_out_full_n == 1'b0) | (out_M_real_V_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond_i_i_fu_294_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((ap_sig_ioackin_m_axi_in_M_real_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((ap_sig_ioackin_m_axi_in_M_real_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((m_axi_in_M_real_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((m_axi_in_M_real_V_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (out_r_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (config_data_V_full_n == 1'b0) | (config_data_V_2_full_n == 1'b0) | (real_start == 1'b0) | (out_M_imag_V_out_full_n == 1'b0) | (out_M_real_V_out_full_n == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign config_data_V_2_din = p_Result_s_fu_252_p5;

assign config_data_V_din = p_Result_s_fu_252_p5;

assign exitcond_i_i_fu_294_p2 = ((i_i_i_reg_233 == 11'd1024) ? 1'b1 : 1'b0);

assign i_fu_300_p2 = (i_i_i_reg_233 + 11'd1);

assign m_axi_in_M_real_V_ARBURST = 2'd0;

assign m_axi_in_M_real_V_ARCACHE = 4'd0;

assign m_axi_in_M_real_V_ARID = 1'd0;

assign m_axi_in_M_real_V_ARLEN = 32'd1;

assign m_axi_in_M_real_V_ARLOCK = 2'd0;

assign m_axi_in_M_real_V_ARPROT = 3'd0;

assign m_axi_in_M_real_V_ARQOS = 4'd0;

assign m_axi_in_M_real_V_ARREGION = 4'd0;

assign m_axi_in_M_real_V_ARSIZE = 3'd0;

assign m_axi_in_M_real_V_ARUSER = 1'd0;

assign m_axi_in_M_real_V_AWADDR = 32'd0;

assign m_axi_in_M_real_V_AWBURST = 2'd0;

assign m_axi_in_M_real_V_AWCACHE = 4'd0;

assign m_axi_in_M_real_V_AWID = 1'd0;

assign m_axi_in_M_real_V_AWLEN = 32'd0;

assign m_axi_in_M_real_V_AWLOCK = 2'd0;

assign m_axi_in_M_real_V_AWPROT = 3'd0;

assign m_axi_in_M_real_V_AWQOS = 4'd0;

assign m_axi_in_M_real_V_AWREGION = 4'd0;

assign m_axi_in_M_real_V_AWSIZE = 3'd0;

assign m_axi_in_M_real_V_AWUSER = 1'd0;

assign m_axi_in_M_real_V_AWVALID = 1'b0;

assign m_axi_in_M_real_V_BREADY = 1'b0;

assign m_axi_in_M_real_V_WDATA = 16'd0;

assign m_axi_in_M_real_V_WID = 1'd0;

assign m_axi_in_M_real_V_WLAST = 1'b0;

assign m_axi_in_M_real_V_WSTRB = 2'd0;

assign m_axi_in_M_real_V_WUSER = 1'd0;

assign m_axi_in_M_real_V_WVALID = 1'b0;

assign out_M_imag_V_out_din = out_M_imag_V;

assign out_M_real_V_out_din = out_M_real_V;

assign out_r_din = {{in_M_real_V_addr_1_s_reg_382}, {in_M_real_V_addr_re_reg_377}};

assign p_Result_s_fu_252_p5 = {{ap_const_lv16_0[15:11]}, {tmp_6_i_i_fu_244_p3}};

assign sext6_cast_i_i_fu_290_p1 = tmp_13_fu_280_p4;

assign sext_cast_i_i_fu_276_p1 = tmp_fu_266_p4;

assign start_out = real_start;

assign sum3_cast_i_i_fu_315_p1 = sum3_i_i_fu_310_p2;

assign sum3_i_i_fu_310_p2 = (sext_cast_i_i_reg_347 + tmp_cast_i_i_fu_306_p1);

assign sum9_cast_i_i_fu_330_p1 = sum9_i_i_fu_325_p2;

assign sum9_i_i_fu_325_p2 = (sext6_cast_i_i_reg_352 + tmp_cast_i_i_fu_306_p1);

assign tmp_13_fu_280_p4 = {{in_M_imag_V_offset[31:1]}};

assign tmp_6_i_i_fu_244_p3 = {{10'd683}, {direction}};

assign tmp_cast_i_i_fu_306_p1 = i_i_i_reg_233;

assign tmp_fu_266_p4 = {{in_M_real_V_offset[31:1]}};

always @ (posedge ap_clk) begin
    sext_cast_i_i_reg_347[31] <= 1'b0;
    sext6_cast_i_i_reg_352[31] <= 1'b0;
end

endmodule //dummy_proc_fe11
