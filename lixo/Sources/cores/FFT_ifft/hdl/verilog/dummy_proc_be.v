// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dummy_proc_be (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        status_in_data_V_dout,
        status_in_data_V_empty_n,
        status_in_data_V_read,
        ovflo,
        ovflo_ap_vld,
        in_r_dout,
        in_r_empty_n,
        in_r_read,
        m_axi_out_M_real_V_AWVALID,
        m_axi_out_M_real_V_AWREADY,
        m_axi_out_M_real_V_AWADDR,
        m_axi_out_M_real_V_AWID,
        m_axi_out_M_real_V_AWLEN,
        m_axi_out_M_real_V_AWSIZE,
        m_axi_out_M_real_V_AWBURST,
        m_axi_out_M_real_V_AWLOCK,
        m_axi_out_M_real_V_AWCACHE,
        m_axi_out_M_real_V_AWPROT,
        m_axi_out_M_real_V_AWQOS,
        m_axi_out_M_real_V_AWREGION,
        m_axi_out_M_real_V_AWUSER,
        m_axi_out_M_real_V_WVALID,
        m_axi_out_M_real_V_WREADY,
        m_axi_out_M_real_V_WDATA,
        m_axi_out_M_real_V_WSTRB,
        m_axi_out_M_real_V_WLAST,
        m_axi_out_M_real_V_WID,
        m_axi_out_M_real_V_WUSER,
        m_axi_out_M_real_V_ARVALID,
        m_axi_out_M_real_V_ARREADY,
        m_axi_out_M_real_V_ARADDR,
        m_axi_out_M_real_V_ARID,
        m_axi_out_M_real_V_ARLEN,
        m_axi_out_M_real_V_ARSIZE,
        m_axi_out_M_real_V_ARBURST,
        m_axi_out_M_real_V_ARLOCK,
        m_axi_out_M_real_V_ARCACHE,
        m_axi_out_M_real_V_ARPROT,
        m_axi_out_M_real_V_ARQOS,
        m_axi_out_M_real_V_ARREGION,
        m_axi_out_M_real_V_ARUSER,
        m_axi_out_M_real_V_RVALID,
        m_axi_out_M_real_V_RREADY,
        m_axi_out_M_real_V_RDATA,
        m_axi_out_M_real_V_RLAST,
        m_axi_out_M_real_V_RID,
        m_axi_out_M_real_V_RUSER,
        m_axi_out_M_real_V_RRESP,
        m_axi_out_M_real_V_BVALID,
        m_axi_out_M_real_V_BREADY,
        m_axi_out_M_real_V_BRESP,
        m_axi_out_M_real_V_BID,
        m_axi_out_M_real_V_BUSER,
        out_M_real_V_offset_dout,
        out_M_real_V_offset_empty_n,
        out_M_real_V_offset_read,
        out_M_imag_V_offset_dout,
        out_M_imag_V_offset_empty_n,
        out_M_imag_V_offset_read
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] status_in_data_V_dout;
input   status_in_data_V_empty_n;
output   status_in_data_V_read;
output   ovflo;
output   ovflo_ap_vld;
input  [31:0] in_r_dout;
input   in_r_empty_n;
output   in_r_read;
output   m_axi_out_M_real_V_AWVALID;
input   m_axi_out_M_real_V_AWREADY;
output  [31:0] m_axi_out_M_real_V_AWADDR;
output  [0:0] m_axi_out_M_real_V_AWID;
output  [31:0] m_axi_out_M_real_V_AWLEN;
output  [2:0] m_axi_out_M_real_V_AWSIZE;
output  [1:0] m_axi_out_M_real_V_AWBURST;
output  [1:0] m_axi_out_M_real_V_AWLOCK;
output  [3:0] m_axi_out_M_real_V_AWCACHE;
output  [2:0] m_axi_out_M_real_V_AWPROT;
output  [3:0] m_axi_out_M_real_V_AWQOS;
output  [3:0] m_axi_out_M_real_V_AWREGION;
output  [0:0] m_axi_out_M_real_V_AWUSER;
output   m_axi_out_M_real_V_WVALID;
input   m_axi_out_M_real_V_WREADY;
output  [15:0] m_axi_out_M_real_V_WDATA;
output  [1:0] m_axi_out_M_real_V_WSTRB;
output   m_axi_out_M_real_V_WLAST;
output  [0:0] m_axi_out_M_real_V_WID;
output  [0:0] m_axi_out_M_real_V_WUSER;
output   m_axi_out_M_real_V_ARVALID;
input   m_axi_out_M_real_V_ARREADY;
output  [31:0] m_axi_out_M_real_V_ARADDR;
output  [0:0] m_axi_out_M_real_V_ARID;
output  [31:0] m_axi_out_M_real_V_ARLEN;
output  [2:0] m_axi_out_M_real_V_ARSIZE;
output  [1:0] m_axi_out_M_real_V_ARBURST;
output  [1:0] m_axi_out_M_real_V_ARLOCK;
output  [3:0] m_axi_out_M_real_V_ARCACHE;
output  [2:0] m_axi_out_M_real_V_ARPROT;
output  [3:0] m_axi_out_M_real_V_ARQOS;
output  [3:0] m_axi_out_M_real_V_ARREGION;
output  [0:0] m_axi_out_M_real_V_ARUSER;
input   m_axi_out_M_real_V_RVALID;
output   m_axi_out_M_real_V_RREADY;
input  [15:0] m_axi_out_M_real_V_RDATA;
input   m_axi_out_M_real_V_RLAST;
input  [0:0] m_axi_out_M_real_V_RID;
input  [0:0] m_axi_out_M_real_V_RUSER;
input  [1:0] m_axi_out_M_real_V_RRESP;
input   m_axi_out_M_real_V_BVALID;
output   m_axi_out_M_real_V_BREADY;
input  [1:0] m_axi_out_M_real_V_BRESP;
input  [0:0] m_axi_out_M_real_V_BID;
input  [0:0] m_axi_out_M_real_V_BUSER;
input  [31:0] out_M_real_V_offset_dout;
input   out_M_real_V_offset_empty_n;
output   out_M_real_V_offset_read;
input  [31:0] out_M_imag_V_offset_dout;
input   out_M_imag_V_offset_empty_n;
output   out_M_imag_V_offset_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg status_in_data_V_read;
reg ovflo;
reg ovflo_ap_vld;
reg in_r_read;
reg m_axi_out_M_real_V_AWVALID;
reg[31:0] m_axi_out_M_real_V_AWADDR;
reg m_axi_out_M_real_V_WVALID;
reg[15:0] m_axi_out_M_real_V_WDATA;
reg m_axi_out_M_real_V_BREADY;
reg out_M_real_V_offset_read;
reg out_M_imag_V_offset_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    status_in_data_V_blk_n;
reg    in_r_blk_n;
wire    ap_CS_fsm_state3;
reg    out_M_real_V_blk_n_AW;
reg    out_M_real_V_blk_n_W;
wire    ap_CS_fsm_state4;
reg    out_M_real_V_blk_n_B;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state10;
reg    out_M_real_V_offset_blk_n;
reg    out_M_imag_V_offset_blk_n;
wire   [31:0] sext_cast_i_fu_201_p1;
reg   [31:0] sext_cast_i_reg_279;
reg    ap_block_state1;
wire   [31:0] sext6_cast_i_fu_215_p1;
reg   [31:0] sext6_cast_i_reg_284;
wire   [10:0] i_fu_225_p2;
reg   [10:0] i_reg_292;
wire    ap_CS_fsm_state2;
reg   [31:0] out_M_imag_V_addr_reg_297;
wire   [0:0] exitcond_i_fu_219_p2;
reg   [31:0] out_M_imag_V_addr_1_reg_303;
wire   [15:0] tmp_16_fu_265_p1;
reg   [15:0] tmp_16_reg_309;
reg    ap_sig_ioackin_m_axi_out_M_real_V_AWREADY;
reg   [15:0] in_M_imag_V_load_ne_reg_314;
reg   [10:0] i_i_reg_175;
wire   [63:0] sum3_cast_i_fu_240_p1;
wire   [63:0] sum9_cast_i_fu_255_p1;
reg    ap_reg_ioackin_m_axi_out_M_real_V_AWREADY;
reg    ap_reg_ioackin_m_axi_out_M_real_V_WREADY;
reg    ap_sig_ioackin_m_axi_out_M_real_V_WREADY;
reg    ap_block_state4_io;
wire   [0:0] tmp_fu_186_p1;
reg    ovflo_preg;
wire   [30:0] tmp_14_fu_191_p4;
wire   [30:0] tmp_15_fu_205_p4;
wire   [31:0] tmp_cast_i_fu_231_p1;
wire   [31:0] sum3_i_fu_235_p2;
wire   [31:0] sum9_i_fu_250_p2;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 10'd1;
#0 ap_reg_ioackin_m_axi_out_M_real_V_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_out_M_real_V_WREADY = 1'b0;
#0 ovflo_preg = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond_i_fu_219_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_out_M_real_V_AWREADY <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_state4_io) & (1'b1 == ap_CS_fsm_state4)) | (~((in_r_empty_n == 1'b0) | (ap_sig_ioackin_m_axi_out_M_real_V_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state3)))) begin
            ap_reg_ioackin_m_axi_out_M_real_V_AWREADY <= 1'b0;
        end else if ((((m_axi_out_M_real_V_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((in_r_empty_n == 1'b1) & (m_axi_out_M_real_V_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
            ap_reg_ioackin_m_axi_out_M_real_V_AWREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_out_M_real_V_WREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state5) & (ap_sig_ioackin_m_axi_out_M_real_V_WREADY == 1'b1)) | ((1'b0 == ap_block_state4_io) & (1'b1 == ap_CS_fsm_state4)))) begin
            ap_reg_ioackin_m_axi_out_M_real_V_WREADY <= 1'b0;
        end else if ((((m_axi_out_M_real_V_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((m_axi_out_M_real_V_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)))) begin
            ap_reg_ioackin_m_axi_out_M_real_V_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ovflo_preg <= 1'b0;
    end else begin
        if ((~((out_M_real_V_offset_empty_n == 1'b0) | (status_in_data_V_empty_n == 1'b0) | (ap_start == 1'b0) | (out_M_imag_V_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ovflo_preg <= tmp_fu_186_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_out_M_real_V_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        i_i_reg_175 <= i_reg_292;
    end else if ((~((out_M_real_V_offset_empty_n == 1'b0) | (status_in_data_V_empty_n == 1'b0) | (ap_start == 1'b0) | (out_M_imag_V_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_i_reg_175 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_292 <= i_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((in_r_empty_n == 1'b0) | (ap_sig_ioackin_m_axi_out_M_real_V_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        in_M_imag_V_load_ne_reg_314 <= {{in_r_dout[31:16]}};
        tmp_16_reg_309 <= tmp_16_fu_265_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_219_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        out_M_imag_V_addr_1_reg_303 <= sum9_cast_i_fu_255_p1;
        out_M_imag_V_addr_reg_297 <= sum3_cast_i_fu_240_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((out_M_real_V_offset_empty_n == 1'b0) | (status_in_data_V_empty_n == 1'b0) | (ap_start == 1'b0) | (out_M_imag_V_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sext6_cast_i_reg_284[30 : 0] <= sext6_cast_i_fu_215_p1[30 : 0];
        sext_cast_i_reg_279[30 : 0] <= sext_cast_i_fu_201_p1[30 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_i_fu_219_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_i_fu_219_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_out_M_real_V_AWREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_out_M_real_V_AWREADY = m_axi_out_M_real_V_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_out_M_real_V_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_out_M_real_V_WREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_out_M_real_V_WREADY = m_axi_out_M_real_V_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_out_M_real_V_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_r_blk_n = in_r_empty_n;
    end else begin
        in_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((in_r_empty_n == 1'b0) | (ap_sig_ioackin_m_axi_out_M_real_V_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        in_r_read = 1'b1;
    end else begin
        in_r_read = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_out_M_real_V_AWREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            m_axi_out_M_real_V_AWADDR = out_M_imag_V_addr_1_reg_303;
        end else if (((in_r_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            m_axi_out_M_real_V_AWADDR = out_M_imag_V_addr_reg_297;
        end else begin
            m_axi_out_M_real_V_AWADDR = 'bx;
        end
    end else begin
        m_axi_out_M_real_V_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_m_axi_out_M_real_V_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state4)) | ((in_r_empty_n == 1'b1) & (ap_reg_ioackin_m_axi_out_M_real_V_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3)))) begin
        m_axi_out_M_real_V_AWVALID = 1'b1;
    end else begin
        m_axi_out_M_real_V_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((m_axi_out_M_real_V_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((m_axi_out_M_real_V_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9)))) begin
        m_axi_out_M_real_V_BREADY = 1'b1;
    end else begin
        m_axi_out_M_real_V_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_out_M_real_V_WREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            m_axi_out_M_real_V_WDATA = in_M_imag_V_load_ne_reg_314;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            m_axi_out_M_real_V_WDATA = tmp_16_reg_309;
        end else begin
            m_axi_out_M_real_V_WDATA = 'bx;
        end
    end else begin
        m_axi_out_M_real_V_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_m_axi_out_M_real_V_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state5)) | ((ap_reg_ioackin_m_axi_out_M_real_V_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state4)))) begin
        m_axi_out_M_real_V_WVALID = 1'b1;
    end else begin
        m_axi_out_M_real_V_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_M_imag_V_offset_blk_n = out_M_imag_V_offset_empty_n;
    end else begin
        out_M_imag_V_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((out_M_real_V_offset_empty_n == 1'b0) | (status_in_data_V_empty_n == 1'b0) | (ap_start == 1'b0) | (out_M_imag_V_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_M_imag_V_offset_read = 1'b1;
    end else begin
        out_M_imag_V_offset_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        out_M_real_V_blk_n_AW = m_axi_out_M_real_V_AWREADY;
    end else begin
        out_M_real_V_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        out_M_real_V_blk_n_B = m_axi_out_M_real_V_BVALID;
    end else begin
        out_M_real_V_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4))) begin
        out_M_real_V_blk_n_W = m_axi_out_M_real_V_WREADY;
    end else begin
        out_M_real_V_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_M_real_V_offset_blk_n = out_M_real_V_offset_empty_n;
    end else begin
        out_M_real_V_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((out_M_real_V_offset_empty_n == 1'b0) | (status_in_data_V_empty_n == 1'b0) | (ap_start == 1'b0) | (out_M_imag_V_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_M_real_V_offset_read = 1'b1;
    end else begin
        out_M_real_V_offset_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_M_real_V_offset_empty_n == 1'b0) | (status_in_data_V_empty_n == 1'b0) | (ap_start == 1'b0) | (out_M_imag_V_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ovflo = tmp_fu_186_p1;
    end else begin
        ovflo = ovflo_preg;
    end
end

always @ (*) begin
    if ((~((out_M_real_V_offset_empty_n == 1'b0) | (status_in_data_V_empty_n == 1'b0) | (ap_start == 1'b0) | (out_M_imag_V_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ovflo_ap_vld = 1'b1;
    end else begin
        ovflo_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        status_in_data_V_blk_n = status_in_data_V_empty_n;
    end else begin
        status_in_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((out_M_real_V_offset_empty_n == 1'b0) | (status_in_data_V_empty_n == 1'b0) | (ap_start == 1'b0) | (out_M_imag_V_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        status_in_data_V_read = 1'b1;
    end else begin
        status_in_data_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((out_M_real_V_offset_empty_n == 1'b0) | (status_in_data_V_empty_n == 1'b0) | (ap_start == 1'b0) | (out_M_imag_V_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond_i_fu_219_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((in_r_empty_n == 1'b0) | (ap_sig_ioackin_m_axi_out_M_real_V_AWREADY == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b0 == ap_block_state4_io) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (ap_sig_ioackin_m_axi_out_M_real_V_WREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((m_axi_out_M_real_V_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((m_axi_out_M_real_V_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((out_M_real_V_offset_empty_n == 1'b0) | (status_in_data_V_empty_n == 1'b0) | (ap_start == 1'b0) | (out_M_imag_V_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state4_io = ((ap_sig_ioackin_m_axi_out_M_real_V_WREADY == 1'b0) | (ap_sig_ioackin_m_axi_out_M_real_V_AWREADY == 1'b0));
end

assign exitcond_i_fu_219_p2 = ((i_i_reg_175 == 11'd1024) ? 1'b1 : 1'b0);

assign i_fu_225_p2 = (i_i_reg_175 + 11'd1);

assign m_axi_out_M_real_V_ARADDR = 32'd0;

assign m_axi_out_M_real_V_ARBURST = 2'd0;

assign m_axi_out_M_real_V_ARCACHE = 4'd0;

assign m_axi_out_M_real_V_ARID = 1'd0;

assign m_axi_out_M_real_V_ARLEN = 32'd0;

assign m_axi_out_M_real_V_ARLOCK = 2'd0;

assign m_axi_out_M_real_V_ARPROT = 3'd0;

assign m_axi_out_M_real_V_ARQOS = 4'd0;

assign m_axi_out_M_real_V_ARREGION = 4'd0;

assign m_axi_out_M_real_V_ARSIZE = 3'd0;

assign m_axi_out_M_real_V_ARUSER = 1'd0;

assign m_axi_out_M_real_V_ARVALID = 1'b0;

assign m_axi_out_M_real_V_AWBURST = 2'd0;

assign m_axi_out_M_real_V_AWCACHE = 4'd0;

assign m_axi_out_M_real_V_AWID = 1'd0;

assign m_axi_out_M_real_V_AWLEN = 32'd1;

assign m_axi_out_M_real_V_AWLOCK = 2'd0;

assign m_axi_out_M_real_V_AWPROT = 3'd0;

assign m_axi_out_M_real_V_AWQOS = 4'd0;

assign m_axi_out_M_real_V_AWREGION = 4'd0;

assign m_axi_out_M_real_V_AWSIZE = 3'd0;

assign m_axi_out_M_real_V_AWUSER = 1'd0;

assign m_axi_out_M_real_V_RREADY = 1'b0;

assign m_axi_out_M_real_V_WID = 1'd0;

assign m_axi_out_M_real_V_WLAST = 1'b0;

assign m_axi_out_M_real_V_WSTRB = 2'd3;

assign m_axi_out_M_real_V_WUSER = 1'd0;

assign sext6_cast_i_fu_215_p1 = tmp_15_fu_205_p4;

assign sext_cast_i_fu_201_p1 = tmp_14_fu_191_p4;

assign sum3_cast_i_fu_240_p1 = sum3_i_fu_235_p2;

assign sum3_i_fu_235_p2 = (tmp_cast_i_fu_231_p1 + sext_cast_i_reg_279);

assign sum9_cast_i_fu_255_p1 = sum9_i_fu_250_p2;

assign sum9_i_fu_250_p2 = (tmp_cast_i_fu_231_p1 + sext6_cast_i_reg_284);

assign tmp_14_fu_191_p4 = {{out_M_real_V_offset_dout[31:1]}};

assign tmp_15_fu_205_p4 = {{out_M_imag_V_offset_dout[31:1]}};

assign tmp_16_fu_265_p1 = in_r_dout[15:0];

assign tmp_cast_i_fu_231_p1 = i_i_reg_175;

assign tmp_fu_186_p1 = status_in_data_V_dout[0:0];

always @ (posedge ap_clk) begin
    sext_cast_i_reg_279[31] <= 1'b0;
    sext6_cast_i_reg_284[31] <= 1'b0;
end

endmodule //dummy_proc_be
