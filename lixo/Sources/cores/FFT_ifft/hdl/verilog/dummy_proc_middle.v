// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dummy_proc_middle (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        config_in_data_V_dout,
        config_in_data_V_empty_n,
        config_in_data_V_read,
        config_out_data_V_din,
        config_out_data_V_full_n,
        config_out_data_V_write,
        st_in_data_V_dout,
        st_in_data_V_empty_n,
        st_in_data_V_read,
        in_r_dout,
        in_r_empty_n,
        in_r_read,
        out_r_din,
        out_r_full_n,
        out_r_write
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;
parameter    ap_const_lv16_0 = 16'd0;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] config_in_data_V_dout;
input   config_in_data_V_empty_n;
output   config_in_data_V_read;
output  [15:0] config_out_data_V_din;
input   config_out_data_V_full_n;
output   config_out_data_V_write;
input  [7:0] st_in_data_V_dout;
input   st_in_data_V_empty_n;
output   st_in_data_V_read;
input  [31:0] in_r_dout;
input   in_r_empty_n;
output   in_r_read;
output  [31:0] out_r_din;
input   out_r_full_n;
output   out_r_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg config_in_data_V_read;
reg config_out_data_V_write;
reg st_in_data_V_read;
reg in_r_read;
reg out_r_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    config_in_data_V_blk_n;
reg    config_out_data_V_blk_n;
wire    ap_CS_fsm_state2;
reg    st_in_data_V_blk_n;
reg    in_r_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond_fu_218_p2;
reg    out_r_blk_n;
wire    ap_CS_fsm_state6;
wire   [0:0] dir_V_fu_175_p1;
reg   [0:0] dir_V_reg_363;
reg    ap_block_state1;
reg   [9:0] p_Result_s_reg_368;
wire   [0:0] ovflw_fu_189_p1;
reg   [0:0] ovflw_reg_373;
wire   [10:0] i_1_fu_224_p2;
reg   [10:0] i_1_reg_382;
reg    ap_block_state3;
reg   [31:0] in_read_reg_387;
wire   [15:0] p_Val2_2_fu_230_p1;
reg   [15:0] p_Val2_2_reg_395;
reg   [15:0] p_Val2_3_reg_401;
wire   [14:0] tmp_10_fu_244_p1;
reg   [14:0] tmp_10_reg_407;
reg   [14:0] p_Result_8_reg_412;
wire   [0:0] not_1_fu_258_p2;
reg   [0:0] not_1_reg_417;
wire    ap_CS_fsm_state4;
wire   [0:0] not_s_fu_263_p2;
reg   [0:0] not_s_reg_422;
wire   [15:0] tmp_s_fu_306_p3;
reg   [15:0] tmp_s_reg_427;
wire    ap_CS_fsm_state5;
wire   [15:0] storemerge_fu_350_p3;
reg   [15:0] storemerge_reg_432;
reg   [10:0] i_reg_164;
wire   [0:0] not_dir_V_fu_193_p2;
wire   [10:0] tmp_fu_198_p3;
wire   [0:0] p_Result_1_fu_275_p3;
wire   [0:0] ret_V_fu_268_p3;
wire   [0:0] p_s_fu_282_p2;
wire   [0:0] p_Result_5_fu_287_p2;
wire   [15:0] tmp_8_fu_293_p3;
wire   [15:0] tmp_9_fu_301_p2;
wire   [0:0] p_Result_3_fu_319_p3;
wire   [0:0] ret_V_1_fu_312_p3;
wire   [0:0] p_1_fu_326_p2;
wire   [0:0] p_Result_6_fu_331_p2;
wire   [15:0] tmp_6_fu_337_p3;
wire   [15:0] tmp_1_fu_345_p2;
reg   [5:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((exitcond_fu_218_p2 == 1'd0) & (in_r_empty_n == 1'b0)) & (exitcond_fu_218_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((out_r_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        i_reg_164 <= i_1_reg_382;
    end else if (((config_out_data_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_164 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((st_in_data_V_empty_n == 1'b0) | (config_in_data_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        dir_V_reg_363 <= dir_V_fu_175_p1;
        ovflw_reg_373 <= ovflw_fu_189_p1;
        p_Result_s_reg_368 <= {{config_in_data_V_dout[10:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_fu_218_p2 == 1'd0) & (in_r_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        i_1_reg_382 <= i_1_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_fu_218_p2 == 1'd0) & (in_r_empty_n == 1'b0)) & (exitcond_fu_218_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        in_read_reg_387 <= in_r_dout;
        p_Val2_2_reg_395 <= p_Val2_2_fu_230_p1;
        p_Val2_3_reg_401 <= {{in_r_dout[31:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (ovflw_reg_373 == 1'd1))) begin
        not_1_reg_417 <= not_1_fu_258_p2;
        not_s_reg_422 <= not_s_fu_263_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((exitcond_fu_218_p2 == 1'd0) & (in_r_empty_n == 1'b0)) & (exitcond_fu_218_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (ovflw_reg_373 == 1'd1))) begin
        p_Result_8_reg_412 <= {{in_r_dout[30:16]}};
        tmp_10_reg_407 <= tmp_10_fu_244_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        storemerge_reg_432 <= storemerge_fu_350_p3;
        tmp_s_reg_427 <= tmp_s_fu_306_p3;
    end
end

always @ (*) begin
    if ((~((exitcond_fu_218_p2 == 1'd0) & (in_r_empty_n == 1'b0)) & (exitcond_fu_218_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        config_in_data_V_blk_n = config_in_data_V_empty_n;
    end else begin
        config_in_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((st_in_data_V_empty_n == 1'b0) | (config_in_data_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        config_in_data_V_read = 1'b1;
    end else begin
        config_in_data_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        config_out_data_V_blk_n = config_out_data_V_full_n;
    end else begin
        config_out_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((config_out_data_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        config_out_data_V_write = 1'b1;
    end else begin
        config_out_data_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_218_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        in_r_blk_n = in_r_empty_n;
    end else begin
        in_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((exitcond_fu_218_p2 == 1'd0) & (in_r_empty_n == 1'b0)) & (exitcond_fu_218_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        in_r_read = 1'b1;
    end else begin
        in_r_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((exitcond_fu_218_p2 == 1'd0) & (in_r_empty_n == 1'b0)) & (exitcond_fu_218_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        out_r_blk_n = out_r_full_n;
    end else begin
        out_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((out_r_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        out_r_write = 1'b1;
    end else begin
        out_r_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        st_in_data_V_blk_n = st_in_data_V_empty_n;
    end else begin
        st_in_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((st_in_data_V_empty_n == 1'b0) | (config_in_data_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        st_in_data_V_read = 1'b1;
    end else begin
        st_in_data_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((st_in_data_V_empty_n == 1'b0) | (config_in_data_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((config_out_data_V_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((exitcond_fu_218_p2 == 1'd0) & (in_r_empty_n == 1'b0)) & (exitcond_fu_218_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((exitcond_fu_218_p2 == 1'd0) & (in_r_empty_n == 1'b0)) & (exitcond_fu_218_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((out_r_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state1 = ((st_in_data_V_empty_n == 1'b0) | (config_in_data_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3 = ((exitcond_fu_218_p2 == 1'd0) & (in_r_empty_n == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign config_out_data_V_din = {{ap_const_lv16_0[15:11]}, {tmp_fu_198_p3}};

assign dir_V_fu_175_p1 = config_in_data_V_dout[0:0];

assign exitcond_fu_218_p2 = ((i_reg_164 == 11'd1024) ? 1'b1 : 1'b0);

assign i_1_fu_224_p2 = (i_reg_164 + 11'd1);

assign not_1_fu_258_p2 = ((tmp_10_reg_407 != 15'd0) ? 1'b1 : 1'b0);

assign not_dir_V_fu_193_p2 = (dir_V_reg_363 ^ 1'd1);

assign not_s_fu_263_p2 = ((p_Result_8_reg_412 != 15'd0) ? 1'b1 : 1'b0);

assign out_r_din = {{storemerge_reg_432}, {tmp_s_reg_427}};

assign ovflw_fu_189_p1 = st_in_data_V_dout[0:0];

assign p_1_fu_326_p2 = (p_Result_3_fu_319_p3 & not_s_reg_422);

assign p_Result_1_fu_275_p3 = in_read_reg_387[32'd15];

assign p_Result_3_fu_319_p3 = in_read_reg_387[32'd31];

assign p_Result_5_fu_287_p2 = (ret_V_fu_268_p3 ^ p_s_fu_282_p2);

assign p_Result_6_fu_331_p2 = (ret_V_1_fu_312_p3 ^ p_1_fu_326_p2);

assign p_Val2_2_fu_230_p1 = in_r_dout[15:0];

assign p_s_fu_282_p2 = (p_Result_1_fu_275_p3 & not_1_reg_417);

assign ret_V_1_fu_312_p3 = in_read_reg_387[32'd31];

assign ret_V_fu_268_p3 = in_read_reg_387[32'd15];

assign start_out = real_start;

assign storemerge_fu_350_p3 = ((ovflw_reg_373[0:0] === 1'b1) ? tmp_1_fu_345_p2 : p_Val2_3_reg_401);

assign tmp_10_fu_244_p1 = in_r_dout[14:0];

assign tmp_1_fu_345_p2 = (p_Val2_3_reg_401 - tmp_6_fu_337_p3);

assign tmp_6_fu_337_p3 = {{p_Result_6_fu_331_p2}, {15'd0}};

assign tmp_8_fu_293_p3 = {{p_Result_5_fu_287_p2}, {15'd0}};

assign tmp_9_fu_301_p2 = (p_Val2_2_reg_395 - tmp_8_fu_293_p3);

assign tmp_fu_198_p3 = {{p_Result_s_reg_368}, {not_dir_V_fu_193_p2}};

assign tmp_s_fu_306_p3 = ((ovflw_reg_373[0:0] === 1'b1) ? tmp_9_fu_301_p2 : p_Val2_2_reg_395);

endmodule //dummy_proc_middle
