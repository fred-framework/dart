-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity acc_mod is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    id : OUT STD_LOGIC_VECTOR (31 downto 0);
    id_ap_vld : OUT STD_LOGIC;
    m_axi_mem_port_in_V_AWVALID : OUT STD_LOGIC;
    m_axi_mem_port_in_V_AWREADY : IN STD_LOGIC;
    m_axi_mem_port_in_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_port_in_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_port_in_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_port_in_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_port_in_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_port_in_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_port_in_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_port_in_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_port_in_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_port_in_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_port_in_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_port_in_V_WVALID : OUT STD_LOGIC;
    m_axi_mem_port_in_V_WREADY : IN STD_LOGIC;
    m_axi_mem_port_in_V_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem_port_in_V_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_port_in_V_WLAST : OUT STD_LOGIC;
    m_axi_mem_port_in_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_port_in_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_port_in_V_ARVALID : OUT STD_LOGIC;
    m_axi_mem_port_in_V_ARREADY : IN STD_LOGIC;
    m_axi_mem_port_in_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_port_in_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_port_in_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_port_in_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_port_in_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_port_in_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_port_in_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_port_in_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_port_in_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_port_in_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_port_in_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_port_in_V_RVALID : IN STD_LOGIC;
    m_axi_mem_port_in_V_RREADY : OUT STD_LOGIC;
    m_axi_mem_port_in_V_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem_port_in_V_RLAST : IN STD_LOGIC;
    m_axi_mem_port_in_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_port_in_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_port_in_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_port_in_V_BVALID : IN STD_LOGIC;
    m_axi_mem_port_in_V_BREADY : OUT STD_LOGIC;
    m_axi_mem_port_in_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_port_in_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_port_in_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    mem_port_in_V_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    mem_port_in_V_offset_empty_n : IN STD_LOGIC;
    mem_port_in_V_offset_read : OUT STD_LOGIC;
    mem_port_out_V_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    mem_port_out_V_offset_empty_n : IN STD_LOGIC;
    mem_port_out_V_offset_read : OUT STD_LOGIC;
    args0 : IN STD_LOGIC_VECTOR (31 downto 0);
    args1 : IN STD_LOGIC_VECTOR (31 downto 0);
    args2 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of acc_mod is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000001000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000010000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000100000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (27 downto 0) := "0000000001000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000010000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (27 downto 0) := "0000000100000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (27 downto 0) := "0000001000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (27 downto 0) := "0000010000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (27 downto 0) := "0000100000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (27 downto 0) := "0001000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (27 downto 0) := "0010000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (27 downto 0) := "0100000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (27 downto 0) := "1000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_CA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mem_port_in_V_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mem_port_in_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal mem_port_in_V_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal mem_port_in_V_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal icmp_ln69_reg_1137 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_1137_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_port_in_V_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal mem_port_in_V_offset_blk_n : STD_LOGIC;
    signal mem_port_out_V_offset_blk_n : STD_LOGIC;
    signal phi_ln39_i_i_reg_413 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_ln43_i_i_reg_424 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_i_reg_435 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_0_0_i_i_reg_446 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_0_0_i_i_reg_457 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_ln69_i_i_reg_468 : STD_LOGIC_VECTOR (4 downto 0);
    signal mem_port_out_V_offse_reg_890 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal zext_ln39_1_fu_620_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln39_1_reg_895 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln39_fu_624_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln39_reg_900 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln39_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln39_1_fu_646_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal lshr_ln39_1_i_reg_930 : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln39_1_i_reg_930_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln39_fu_662_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln39_reg_935 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln39_reg_935_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_port_out_V_addr_3_reg_939 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln43_fu_686_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln43_reg_947 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln43_fu_701_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state20_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state21_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state22_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal add_ln43_1_fu_707_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal trunc_ln43_fu_713_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln43_reg_967 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln43_reg_967_pp1_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln43_3_i_reg_972 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln43_3_i_reg_972_pp1_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_port_out_V_addr_4_reg_976 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln47_fu_734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_984 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state24_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state25_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state26_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state27_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state28_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_state29_pp2_stage0_iter5 : BOOLEAN;
    signal ap_block_state30_pp2_stage0_iter6 : BOOLEAN;
    signal ap_block_state31_pp2_stage0_iter7 : BOOLEAN;
    signal ap_block_state32_pp2_stage0_iter8 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln47_reg_984_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_984_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_984_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_984_pp2_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_984_pp2_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_984_pp2_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln47_reg_984_pp2_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln47_fu_740_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal select_ln54_fu_758_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln54_reg_993 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln54_reg_993_pp2_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln54_reg_993_pp2_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln54_reg_993_pp2_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln54_reg_993_pp2_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln54_reg_993_pp2_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln54_reg_993_pp2_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln54_reg_993_pp2_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln54_1_fu_766_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln54_1_reg_998 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln54_1_reg_998_pp2_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln54_1_reg_998_pp2_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln54_1_reg_998_pp2_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln54_1_reg_998_pp2_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln54_1_reg_998_pp2_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln54_1_reg_998_pp2_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln54_1_reg_998_pp2_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln54_1_fu_774_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln54_1_reg_1004 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_fu_780_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln55_reg_1020 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln48_fu_786_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal mat_a_0_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mat_a_0_V_load_reg_1041 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal mat_a_1_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mat_a_1_V_load_reg_1046 : STD_LOGIC_VECTOR (63 downto 0);
    signal mat_b_0_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mat_b_0_V_load_reg_1061 : STD_LOGIC_VECTOR (63 downto 0);
    signal mat_b_1_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mat_b_1_V_load_reg_1066 : STD_LOGIC_VECTOR (63 downto 0);
    signal mat_a_2_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mat_a_2_V_load_reg_1081 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal mat_a_3_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mat_a_3_V_load_reg_1086 : STD_LOGIC_VECTOR (63 downto 0);
    signal mat_b_2_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mat_b_2_V_load_reg_1091 : STD_LOGIC_VECTOR (63 downto 0);
    signal mat_b_3_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mat_b_3_V_load_reg_1096 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_483_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln209_reg_1101 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_482_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln209_1_reg_1106 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_484_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln209_2_reg_1111 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_479_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln209_3_reg_1116 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln700_fu_792_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln700_reg_1121 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln69_fu_857_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln69_reg_1126 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal icmp_ln69_fu_873_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state35_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state36_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state37_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state37_io : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal add_ln69_1_fu_879_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal mat_p_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal mat_p_V_load_reg_1151 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state20 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state24 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter8 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state35 : STD_LOGIC;
    signal mat_a_0_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_a_0_V_ce0 : STD_LOGIC;
    signal mat_a_0_V_we0 : STD_LOGIC;
    signal mat_a_1_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_a_1_V_ce0 : STD_LOGIC;
    signal mat_a_1_V_we0 : STD_LOGIC;
    signal mat_a_2_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_a_2_V_ce0 : STD_LOGIC;
    signal mat_a_2_V_we0 : STD_LOGIC;
    signal mat_a_3_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_a_3_V_ce0 : STD_LOGIC;
    signal mat_a_3_V_we0 : STD_LOGIC;
    signal mat_b_0_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_b_0_V_ce0 : STD_LOGIC;
    signal mat_b_0_V_we0 : STD_LOGIC;
    signal mat_b_1_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_b_1_V_ce0 : STD_LOGIC;
    signal mat_b_1_V_we0 : STD_LOGIC;
    signal mat_b_2_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_b_2_V_ce0 : STD_LOGIC;
    signal mat_b_2_V_we0 : STD_LOGIC;
    signal mat_b_3_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal mat_b_3_V_ce0 : STD_LOGIC;
    signal mat_b_3_V_we0 : STD_LOGIC;
    signal mat_p_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mat_p_V_ce0 : STD_LOGIC;
    signal mat_p_V_we0 : STD_LOGIC;
    signal mat_p_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_r_0_0_i_i_phi_fu_450_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal zext_ln39_3_fu_666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_2_fu_727_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln321_1_fu_816_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln69_3_fu_885_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_2_fu_630_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_1_fu_691_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln69_2_fu_863_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0_01001 : BOOLEAN;
    signal tmp_fu_596_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_1_fu_610_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln39_fu_606_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_2_fu_673_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln43_fu_682_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal icmp_ln48_fu_752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln47_1_fu_746_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_796_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln54_fu_803_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln321_fu_807_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln321_fu_810_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln700_1_fu_821_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_831_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_4_fu_844_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln69_1_fu_853_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln69_fu_840_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;

    component acc_mul_64s_64s_6bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component acc_mod_mat_a_0_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component acc_mod_mat_p_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    mat_a_0_V_U : component acc_mod_mat_a_0_V
    generic map (
        DataWidth => 64,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mat_a_0_V_address0,
        ce0 => mat_a_0_V_ce0,
        we0 => mat_a_0_V_we0,
        d0 => mem_port_out_V_addr_3_reg_939,
        q0 => mat_a_0_V_q0);

    mat_a_1_V_U : component acc_mod_mat_a_0_V
    generic map (
        DataWidth => 64,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mat_a_1_V_address0,
        ce0 => mat_a_1_V_ce0,
        we0 => mat_a_1_V_we0,
        d0 => mem_port_out_V_addr_3_reg_939,
        q0 => mat_a_1_V_q0);

    mat_a_2_V_U : component acc_mod_mat_a_0_V
    generic map (
        DataWidth => 64,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mat_a_2_V_address0,
        ce0 => mat_a_2_V_ce0,
        we0 => mat_a_2_V_we0,
        d0 => mem_port_out_V_addr_3_reg_939,
        q0 => mat_a_2_V_q0);

    mat_a_3_V_U : component acc_mod_mat_a_0_V
    generic map (
        DataWidth => 64,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mat_a_3_V_address0,
        ce0 => mat_a_3_V_ce0,
        we0 => mat_a_3_V_we0,
        d0 => mem_port_out_V_addr_3_reg_939,
        q0 => mat_a_3_V_q0);

    mat_b_0_V_U : component acc_mod_mat_a_0_V
    generic map (
        DataWidth => 64,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mat_b_0_V_address0,
        ce0 => mat_b_0_V_ce0,
        we0 => mat_b_0_V_we0,
        d0 => mem_port_out_V_addr_4_reg_976,
        q0 => mat_b_0_V_q0);

    mat_b_1_V_U : component acc_mod_mat_a_0_V
    generic map (
        DataWidth => 64,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mat_b_1_V_address0,
        ce0 => mat_b_1_V_ce0,
        we0 => mat_b_1_V_we0,
        d0 => mem_port_out_V_addr_4_reg_976,
        q0 => mat_b_1_V_q0);

    mat_b_2_V_U : component acc_mod_mat_a_0_V
    generic map (
        DataWidth => 64,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mat_b_2_V_address0,
        ce0 => mat_b_2_V_ce0,
        we0 => mat_b_2_V_we0,
        d0 => mem_port_out_V_addr_4_reg_976,
        q0 => mat_b_2_V_q0);

    mat_b_3_V_U : component acc_mod_mat_a_0_V
    generic map (
        DataWidth => 64,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mat_b_3_V_address0,
        ce0 => mat_b_3_V_ce0,
        we0 => mat_b_3_V_we0,
        d0 => mem_port_out_V_addr_4_reg_976,
        q0 => mat_b_3_V_q0);

    mat_p_V_U : component acc_mod_mat_p_V
    generic map (
        DataWidth => 64,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mat_p_V_address0,
        ce0 => mat_p_V_ce0,
        we0 => mat_p_V_we0,
        d0 => mat_p_V_d0,
        q0 => mat_p_V_q0);

    acc_mul_64s_64s_6bkb_U6 : component acc_mul_64s_64s_6bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mat_b_3_V_load_reg_1096,
        din1 => mat_a_3_V_load_reg_1086,
        ce => ap_const_logic_1,
        dout => grp_fu_479_p2);

    acc_mul_64s_64s_6bkb_U7 : component acc_mul_64s_64s_6bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mat_b_1_V_load_reg_1066,
        din1 => mat_a_1_V_load_reg_1046,
        ce => ap_const_logic_1,
        dout => grp_fu_482_p2);

    acc_mul_64s_64s_6bkb_U8 : component acc_mul_64s_64s_6bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mat_b_0_V_load_reg_1061,
        din1 => mat_a_0_V_load_reg_1041,
        ce => ap_const_logic_1,
        dout => grp_fu_483_p2);

    acc_mul_64s_64s_6bkb_U9 : component acc_mul_64s_64s_6bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mat_b_2_V_load_reg_1091,
        din1 => mat_a_2_V_load_reg_1081,
        ce => ap_const_logic_1,
        dout => grp_fu_484_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((m_axi_mem_port_in_V_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state20) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state20)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state20);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state24) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state24)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state24);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    ap_enable_reg_pp2_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state35) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((m_axi_mem_port_in_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state35)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state35);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif (((m_axi_mem_port_in_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_0_i_i_reg_457_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                c_0_0_i_i_reg_457 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln47_fu_734_p2 = ap_const_lv1_0))) then 
                c_0_0_i_i_reg_457 <= add_ln48_fu_786_p2;
            end if; 
        end if;
    end process;

    indvar_flatten_i_reg_435_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                indvar_flatten_i_reg_435 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln47_fu_734_p2 = ap_const_lv1_0))) then 
                indvar_flatten_i_reg_435 <= add_ln47_fu_740_p2;
            end if; 
        end if;
    end process;

    phi_ln39_i_i_reg_413_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln39_fu_640_p2 = ap_const_lv1_0))) then 
                phi_ln39_i_i_reg_413 <= add_ln39_1_fu_646_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                phi_ln39_i_i_reg_413 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    phi_ln43_i_i_reg_424_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln43_fu_701_p2 = ap_const_lv1_0))) then 
                phi_ln43_i_i_reg_424 <= add_ln43_1_fu_707_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                phi_ln43_i_i_reg_424 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    phi_ln69_i_i_reg_468_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln69_fu_873_p2 = ap_const_lv1_0))) then 
                phi_ln69_i_i_reg_468 <= add_ln69_1_fu_879_p2;
            elsif (((m_axi_mem_port_in_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                phi_ln69_i_i_reg_468 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    r_0_0_i_i_reg_446_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                r_0_0_i_i_reg_446 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln47_reg_984 = ap_const_lv1_0))) then 
                r_0_0_i_i_reg_446 <= select_ln54_1_reg_998;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (mem_port_out_V_offset_empty_n = ap_const_logic_0) or (mem_port_in_V_offset_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln39_reg_900 <= add_ln39_fu_624_p2;
                mem_port_out_V_offse_reg_890 <= mem_port_out_V_offset_dout;
                    zext_ln39_1_reg_895(28 downto 0) <= zext_ln39_1_fu_620_p1(28 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln43_reg_947 <= add_ln43_fu_686_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                add_ln69_reg_1126 <= add_ln69_fu_857_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln47_reg_984_pp2_iter6_reg = ap_const_lv1_0))) then
                add_ln700_reg_1121 <= add_ln700_fu_792_p2;
                mul_ln209_2_reg_1111 <= grp_fu_484_p2;
                mul_ln209_3_reg_1116 <= grp_fu_479_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln47_reg_984 <= icmp_ln47_fu_734_p2;
                icmp_ln47_reg_984_pp2_iter1_reg <= icmp_ln47_reg_984;
                select_ln54_1_reg_998_pp2_iter1_reg <= select_ln54_1_reg_998;
                select_ln54_reg_993_pp2_iter1_reg <= select_ln54_reg_993;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                icmp_ln47_reg_984_pp2_iter2_reg <= icmp_ln47_reg_984_pp2_iter1_reg;
                icmp_ln47_reg_984_pp2_iter3_reg <= icmp_ln47_reg_984_pp2_iter2_reg;
                icmp_ln47_reg_984_pp2_iter4_reg <= icmp_ln47_reg_984_pp2_iter3_reg;
                icmp_ln47_reg_984_pp2_iter5_reg <= icmp_ln47_reg_984_pp2_iter4_reg;
                icmp_ln47_reg_984_pp2_iter6_reg <= icmp_ln47_reg_984_pp2_iter5_reg;
                icmp_ln47_reg_984_pp2_iter7_reg <= icmp_ln47_reg_984_pp2_iter6_reg;
                select_ln54_1_reg_998_pp2_iter2_reg <= select_ln54_1_reg_998_pp2_iter1_reg;
                select_ln54_1_reg_998_pp2_iter3_reg <= select_ln54_1_reg_998_pp2_iter2_reg;
                select_ln54_1_reg_998_pp2_iter4_reg <= select_ln54_1_reg_998_pp2_iter3_reg;
                select_ln54_1_reg_998_pp2_iter5_reg <= select_ln54_1_reg_998_pp2_iter4_reg;
                select_ln54_1_reg_998_pp2_iter6_reg <= select_ln54_1_reg_998_pp2_iter5_reg;
                select_ln54_1_reg_998_pp2_iter7_reg <= select_ln54_1_reg_998_pp2_iter6_reg;
                select_ln54_reg_993_pp2_iter2_reg <= select_ln54_reg_993_pp2_iter1_reg;
                select_ln54_reg_993_pp2_iter3_reg <= select_ln54_reg_993_pp2_iter2_reg;
                select_ln54_reg_993_pp2_iter4_reg <= select_ln54_reg_993_pp2_iter3_reg;
                select_ln54_reg_993_pp2_iter5_reg <= select_ln54_reg_993_pp2_iter4_reg;
                select_ln54_reg_993_pp2_iter6_reg <= select_ln54_reg_993_pp2_iter5_reg;
                select_ln54_reg_993_pp2_iter7_reg <= select_ln54_reg_993_pp2_iter6_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln69_reg_1137 <= icmp_ln69_fu_873_p2;
                icmp_ln69_reg_1137_pp3_iter1_reg <= icmp_ln69_reg_1137;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln39_fu_640_p2 = ap_const_lv1_0))) then
                lshr_ln39_1_i_reg_930 <= phi_ln39_i_i_reg_413(4 downto 2);
                trunc_ln39_reg_935 <= trunc_ln39_fu_662_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                lshr_ln39_1_i_reg_930_pp0_iter1_reg <= lshr_ln39_1_i_reg_930;
                mem_port_out_V_addr_3_reg_939 <= m_axi_mem_port_in_V_RDATA;
                trunc_ln39_reg_935_pp0_iter1_reg <= trunc_ln39_reg_935;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln47_reg_984 = ap_const_lv1_0))) then
                mat_a_0_V_load_reg_1041 <= mat_a_0_V_q0;
                mat_a_1_V_load_reg_1046 <= mat_a_1_V_q0;
                mat_b_0_V_load_reg_1061 <= mat_b_0_V_q0;
                mat_b_1_V_load_reg_1066 <= mat_b_1_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (icmp_ln47_reg_984_pp2_iter1_reg = ap_const_lv1_0))) then
                mat_a_2_V_load_reg_1081 <= mat_a_2_V_q0;
                mat_a_3_V_load_reg_1086 <= mat_a_3_V_q0;
                mat_b_2_V_load_reg_1091 <= mat_b_2_V_q0;
                mat_b_3_V_load_reg_1096 <= mat_b_3_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln69_reg_1137 = ap_const_lv1_0))) then
                mat_p_V_load_reg_1151 <= mat_p_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                mem_port_out_V_addr_4_reg_976 <= m_axi_mem_port_in_V_RDATA;
                trunc_ln43_3_i_reg_972_pp1_iter1_reg <= trunc_ln43_3_i_reg_972;
                trunc_ln43_reg_967_pp1_iter1_reg <= trunc_ln43_reg_967;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln47_reg_984_pp2_iter5_reg = ap_const_lv1_0))) then
                mul_ln209_1_reg_1106 <= grp_fu_482_p2;
                mul_ln209_reg_1101 <= grp_fu_483_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln47_fu_734_p2 = ap_const_lv1_0))) then
                select_ln54_1_reg_998 <= select_ln54_1_fu_766_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln47_fu_734_p2 = ap_const_lv1_0))) then
                select_ln54_reg_993 <= select_ln54_fu_758_p3;
                    zext_ln54_1_reg_1004(2 downto 0) <= zext_ln54_1_fu_774_p1(2 downto 0);
                    zext_ln55_reg_1020(2 downto 0) <= zext_ln55_fu_780_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln43_fu_701_p2 = ap_const_lv1_0))) then
                trunc_ln43_3_i_reg_972 <= phi_ln43_i_i_reg_424(3 downto 2);
                trunc_ln43_reg_967 <= trunc_ln43_fu_713_p1;
            end if;
        end if;
    end process;
    zext_ln39_1_reg_895(29) <= '0';
    zext_ln54_1_reg_1004(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln55_reg_1020(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, m_axi_mem_port_in_V_AWREADY, m_axi_mem_port_in_V_ARREADY, m_axi_mem_port_in_V_BVALID, mem_port_in_V_offset_empty_n, mem_port_out_V_offset_empty_n, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, ap_CS_fsm_state34, ap_enable_reg_pp3_iter2, ap_CS_fsm_state42, ap_CS_fsm_state13, ap_enable_reg_pp1_iter1, icmp_ln39_fu_640_p2, ap_enable_reg_pp0_iter0, icmp_ln43_fu_701_p2, ap_enable_reg_pp1_iter0, icmp_ln47_fu_734_p2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, icmp_ln69_fu_873_p2, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter7, ap_enable_reg_pp2_iter8, ap_block_pp3_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (mem_port_out_V_offset_empty_n = ap_const_logic_0) or (mem_port_in_V_offset_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((m_axi_mem_port_in_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln39_fu_640_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln39_fu_640_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((m_axi_mem_port_in_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln43_fu_701_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln43_fu_701_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln47_fu_734_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp2_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter8 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter8 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln47_fu_734_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((m_axi_mem_port_in_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln69_fu_873_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln69_fu_873_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if (((m_axi_mem_port_in_V_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln321_fu_810_p2 <= std_logic_vector(unsigned(zext_ln54_fu_803_p1) + unsigned(zext_ln321_fu_807_p1));
    add_ln39_1_fu_646_p2 <= std_logic_vector(unsigned(phi_ln39_i_i_reg_413) + unsigned(ap_const_lv5_1));
    add_ln39_fu_624_p2 <= std_logic_vector(unsigned(zext_ln39_1_fu_620_p1) + unsigned(zext_ln39_fu_606_p1));
    add_ln43_1_fu_707_p2 <= std_logic_vector(unsigned(phi_ln43_i_i_reg_424) + unsigned(ap_const_lv5_1));
    add_ln43_fu_686_p2 <= std_logic_vector(unsigned(zext_ln39_1_reg_895) + unsigned(zext_ln43_fu_682_p1));
    add_ln47_1_fu_746_p2 <= std_logic_vector(unsigned(ap_phi_mux_r_0_0_i_i_phi_fu_450_p4) + unsigned(ap_const_lv3_1));
    add_ln47_fu_740_p2 <= std_logic_vector(unsigned(indvar_flatten_i_reg_435) + unsigned(ap_const_lv5_1));
    add_ln48_fu_786_p2 <= std_logic_vector(unsigned(select_ln54_fu_758_p3) + unsigned(ap_const_lv3_1));
    add_ln69_1_fu_879_p2 <= std_logic_vector(unsigned(phi_ln69_i_i_reg_468) + unsigned(ap_const_lv5_1));
    add_ln69_fu_857_p2 <= std_logic_vector(unsigned(zext_ln69_1_fu_853_p1) + unsigned(zext_ln69_fu_840_p1));
    add_ln700_1_fu_821_p2 <= std_logic_vector(unsigned(mul_ln209_3_reg_1116) + unsigned(mul_ln209_2_reg_1111));
    add_ln700_fu_792_p2 <= std_logic_vector(unsigned(mul_ln209_1_reg_1106) + unsigned(mul_ln209_reg_1101));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(17);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(19);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(22);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state19 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(18);
    ap_CS_fsm_state33 <= ap_CS_fsm(20);
    ap_CS_fsm_state34 <= ap_CS_fsm(21);
    ap_CS_fsm_state42 <= ap_CS_fsm(27);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_mem_port_in_V_RVALID, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((m_axi_mem_port_in_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_mem_port_in_V_RVALID, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((m_axi_mem_port_in_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(m_axi_mem_port_in_V_RVALID, ap_enable_reg_pp1_iter1)
    begin
                ap_block_pp1_stage0_11001 <= ((m_axi_mem_port_in_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(m_axi_mem_port_in_V_RVALID, ap_enable_reg_pp1_iter1)
    begin
                ap_block_pp1_stage0_subdone <= ((m_axi_mem_port_in_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter2, ap_block_state37_io)
    begin
                ap_block_pp3_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state37_io) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter2, ap_block_state37_io)
    begin
                ap_block_pp3_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state37_io) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, mem_port_in_V_offset_empty_n, mem_port_out_V_offset_empty_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (mem_port_out_V_offset_empty_n = ap_const_logic_0) or (mem_port_in_V_offset_empty_n = ap_const_logic_0));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(m_axi_mem_port_in_V_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= (m_axi_mem_port_in_V_RVALID = ap_const_logic_0);
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state21_pp1_stage0_iter1_assign_proc : process(m_axi_mem_port_in_V_RVALID)
    begin
                ap_block_state21_pp1_stage0_iter1 <= (m_axi_mem_port_in_V_RVALID = ap_const_logic_0);
    end process;

        ap_block_state22_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp2_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp2_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp2_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp2_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state37_io_assign_proc : process(m_axi_mem_port_in_V_WREADY, icmp_ln69_reg_1137_pp3_iter1_reg)
    begin
                ap_block_state37_io <= ((m_axi_mem_port_in_V_WREADY = ap_const_logic_0) and (icmp_ln69_reg_1137_pp3_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state37_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln39_fu_640_p2)
    begin
        if ((icmp_ln39_fu_640_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state20_assign_proc : process(icmp_ln43_fu_701_p2)
    begin
        if ((icmp_ln43_fu_701_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state20 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state24_assign_proc : process(icmp_ln47_fu_734_p2)
    begin
        if ((icmp_ln47_fu_734_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state24 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state24 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state35_assign_proc : process(icmp_ln69_fu_873_p2)
    begin
        if ((icmp_ln69_fu_873_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state35 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state35 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, m_axi_mem_port_in_V_BVALID, ap_CS_fsm_state42)
    begin
        if (((m_axi_mem_port_in_V_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter5, ap_enable_reg_pp2_iter6, ap_enable_reg_pp2_iter7, ap_enable_reg_pp2_iter8)
    begin
        if (((ap_enable_reg_pp2_iter8 = ap_const_logic_0) and (ap_enable_reg_pp2_iter7 = ap_const_logic_0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_r_0_0_i_i_phi_fu_450_p4_assign_proc : process(r_0_0_i_i_reg_446, icmp_ln47_reg_984, ap_CS_fsm_pp2_stage0, select_ln54_1_reg_998, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln47_reg_984 = ap_const_lv1_0))) then 
            ap_phi_mux_r_0_0_i_i_phi_fu_450_p4 <= select_ln54_1_reg_998;
        else 
            ap_phi_mux_r_0_0_i_i_phi_fu_450_p4 <= r_0_0_i_i_reg_446;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_mem_port_in_V_BVALID, ap_CS_fsm_state42)
    begin
        if (((m_axi_mem_port_in_V_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln39_fu_640_p2 <= "1" when (phi_ln39_i_i_reg_413 = ap_const_lv5_10) else "0";
    icmp_ln43_fu_701_p2 <= "1" when (phi_ln43_i_i_reg_424 = ap_const_lv5_10) else "0";
    icmp_ln47_fu_734_p2 <= "1" when (indvar_flatten_i_reg_435 = ap_const_lv5_10) else "0";
    icmp_ln48_fu_752_p2 <= "1" when (c_0_0_i_i_reg_457 = ap_const_lv3_4) else "0";
    icmp_ln69_fu_873_p2 <= "1" when (phi_ln69_i_i_reg_468 = ap_const_lv5_10) else "0";
    id <= ap_const_lv32_CA;

    id_ap_vld_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            id_ap_vld <= ap_const_logic_1;
        else 
            id_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_mem_port_in_V_ARADDR_assign_proc : process(m_axi_mem_port_in_V_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state13, zext_ln39_2_fu_630_p1, zext_ln43_1_fu_691_p1)
    begin
        if ((m_axi_mem_port_in_V_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                m_axi_mem_port_in_V_ARADDR <= zext_ln43_1_fu_691_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                m_axi_mem_port_in_V_ARADDR <= zext_ln39_2_fu_630_p1(32 - 1 downto 0);
            else 
                m_axi_mem_port_in_V_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_mem_port_in_V_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_mem_port_in_V_ARBURST <= ap_const_lv2_0;
    m_axi_mem_port_in_V_ARCACHE <= ap_const_lv4_0;
    m_axi_mem_port_in_V_ARID <= ap_const_lv1_0;
    m_axi_mem_port_in_V_ARLEN <= ap_const_lv32_10;
    m_axi_mem_port_in_V_ARLOCK <= ap_const_lv2_0;
    m_axi_mem_port_in_V_ARPROT <= ap_const_lv3_0;
    m_axi_mem_port_in_V_ARQOS <= ap_const_lv4_0;
    m_axi_mem_port_in_V_ARREGION <= ap_const_lv4_0;
    m_axi_mem_port_in_V_ARSIZE <= ap_const_lv3_0;
    m_axi_mem_port_in_V_ARUSER <= ap_const_lv1_0;

    m_axi_mem_port_in_V_ARVALID_assign_proc : process(m_axi_mem_port_in_V_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state13)
    begin
        if ((((m_axi_mem_port_in_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((m_axi_mem_port_in_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            m_axi_mem_port_in_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_mem_port_in_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_mem_port_in_V_AWADDR <= zext_ln69_2_fu_863_p1(32 - 1 downto 0);
    m_axi_mem_port_in_V_AWBURST <= ap_const_lv2_0;
    m_axi_mem_port_in_V_AWCACHE <= ap_const_lv4_0;
    m_axi_mem_port_in_V_AWID <= ap_const_lv1_0;
    m_axi_mem_port_in_V_AWLEN <= ap_const_lv32_10;
    m_axi_mem_port_in_V_AWLOCK <= ap_const_lv2_0;
    m_axi_mem_port_in_V_AWPROT <= ap_const_lv3_0;
    m_axi_mem_port_in_V_AWQOS <= ap_const_lv4_0;
    m_axi_mem_port_in_V_AWREGION <= ap_const_lv4_0;
    m_axi_mem_port_in_V_AWSIZE <= ap_const_lv3_0;
    m_axi_mem_port_in_V_AWUSER <= ap_const_lv1_0;

    m_axi_mem_port_in_V_AWVALID_assign_proc : process(m_axi_mem_port_in_V_AWREADY, ap_CS_fsm_state34)
    begin
        if (((m_axi_mem_port_in_V_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            m_axi_mem_port_in_V_AWVALID <= ap_const_logic_1;
        else 
            m_axi_mem_port_in_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_mem_port_in_V_BREADY_assign_proc : process(m_axi_mem_port_in_V_BVALID, ap_CS_fsm_state42)
    begin
        if (((m_axi_mem_port_in_V_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            m_axi_mem_port_in_V_BREADY <= ap_const_logic_1;
        else 
            m_axi_mem_port_in_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_mem_port_in_V_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            m_axi_mem_port_in_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_mem_port_in_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_mem_port_in_V_WDATA <= mat_p_V_load_reg_1151;
    m_axi_mem_port_in_V_WID <= ap_const_lv1_0;
    m_axi_mem_port_in_V_WLAST <= ap_const_logic_0;
    m_axi_mem_port_in_V_WSTRB <= ap_const_lv8_FF;
    m_axi_mem_port_in_V_WUSER <= ap_const_lv1_0;

    m_axi_mem_port_in_V_WVALID_assign_proc : process(ap_enable_reg_pp3_iter2, icmp_ln69_reg_1137_pp3_iter1_reg, ap_block_pp3_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (icmp_ln69_reg_1137_pp3_iter1_reg = ap_const_lv1_0))) then 
            m_axi_mem_port_in_V_WVALID <= ap_const_logic_1;
        else 
            m_axi_mem_port_in_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    mat_a_0_V_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, zext_ln54_1_fu_774_p1, ap_enable_reg_pp0_iter2, ap_block_pp2_stage0, zext_ln39_3_fu_666_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            mat_a_0_V_address0 <= zext_ln54_1_fu_774_p1(2 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            mat_a_0_V_address0 <= zext_ln39_3_fu_666_p1(2 - 1 downto 0);
        else 
            mat_a_0_V_address0 <= "XX";
        end if; 
    end process;


    mat_a_0_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            mat_a_0_V_ce0 <= ap_const_logic_1;
        else 
            mat_a_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mat_a_0_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln39_reg_935_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((trunc_ln39_reg_935_pp0_iter1_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            mat_a_0_V_we0 <= ap_const_logic_1;
        else 
            mat_a_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mat_a_1_V_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, zext_ln54_1_fu_774_p1, ap_enable_reg_pp0_iter2, ap_block_pp2_stage0, zext_ln39_3_fu_666_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            mat_a_1_V_address0 <= zext_ln54_1_fu_774_p1(2 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            mat_a_1_V_address0 <= zext_ln39_3_fu_666_p1(2 - 1 downto 0);
        else 
            mat_a_1_V_address0 <= "XX";
        end if; 
    end process;


    mat_a_1_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            mat_a_1_V_ce0 <= ap_const_logic_1;
        else 
            mat_a_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mat_a_1_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln39_reg_935_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((trunc_ln39_reg_935_pp0_iter1_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            mat_a_1_V_we0 <= ap_const_logic_1;
        else 
            mat_a_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mat_a_2_V_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp2_stage0, zext_ln54_1_reg_1004, ap_enable_reg_pp2_iter1, ap_enable_reg_pp0_iter2, ap_block_pp2_stage0, zext_ln39_3_fu_666_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            mat_a_2_V_address0 <= zext_ln54_1_reg_1004(2 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            mat_a_2_V_address0 <= zext_ln39_3_fu_666_p1(2 - 1 downto 0);
        else 
            mat_a_2_V_address0 <= "XX";
        end if; 
    end process;


    mat_a_2_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            mat_a_2_V_ce0 <= ap_const_logic_1;
        else 
            mat_a_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mat_a_2_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln39_reg_935_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((trunc_ln39_reg_935_pp0_iter1_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            mat_a_2_V_we0 <= ap_const_logic_1;
        else 
            mat_a_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mat_a_3_V_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp2_stage0, zext_ln54_1_reg_1004, ap_enable_reg_pp2_iter1, ap_enable_reg_pp0_iter2, ap_block_pp2_stage0, zext_ln39_3_fu_666_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            mat_a_3_V_address0 <= zext_ln54_1_reg_1004(2 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            mat_a_3_V_address0 <= zext_ln39_3_fu_666_p1(2 - 1 downto 0);
        else 
            mat_a_3_V_address0 <= "XX";
        end if; 
    end process;


    mat_a_3_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            mat_a_3_V_ce0 <= ap_const_logic_1;
        else 
            mat_a_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mat_a_3_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, trunc_ln39_reg_935_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((trunc_ln39_reg_935_pp0_iter1_reg = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            mat_a_3_V_we0 <= ap_const_logic_1;
        else 
            mat_a_3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mat_b_0_V_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, zext_ln55_fu_780_p1, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0, zext_ln43_2_fu_727_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            mat_b_0_V_address0 <= zext_ln55_fu_780_p1(2 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            mat_b_0_V_address0 <= zext_ln43_2_fu_727_p1(2 - 1 downto 0);
        else 
            mat_b_0_V_address0 <= "XX";
        end if; 
    end process;


    mat_b_0_V_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then 
            mat_b_0_V_ce0 <= ap_const_logic_1;
        else 
            mat_b_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mat_b_0_V_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln43_3_i_reg_972_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((trunc_ln43_3_i_reg_972_pp1_iter1_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            mat_b_0_V_we0 <= ap_const_logic_1;
        else 
            mat_b_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mat_b_1_V_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, zext_ln55_fu_780_p1, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0, zext_ln43_2_fu_727_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            mat_b_1_V_address0 <= zext_ln55_fu_780_p1(2 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            mat_b_1_V_address0 <= zext_ln43_2_fu_727_p1(2 - 1 downto 0);
        else 
            mat_b_1_V_address0 <= "XX";
        end if; 
    end process;


    mat_b_1_V_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then 
            mat_b_1_V_ce0 <= ap_const_logic_1;
        else 
            mat_b_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mat_b_1_V_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln43_3_i_reg_972_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((trunc_ln43_3_i_reg_972_pp1_iter1_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            mat_b_1_V_we0 <= ap_const_logic_1;
        else 
            mat_b_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mat_b_2_V_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp2_stage0, zext_ln55_reg_1020, ap_enable_reg_pp2_iter1, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0, zext_ln43_2_fu_727_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            mat_b_2_V_address0 <= zext_ln55_reg_1020(2 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            mat_b_2_V_address0 <= zext_ln43_2_fu_727_p1(2 - 1 downto 0);
        else 
            mat_b_2_V_address0 <= "XX";
        end if; 
    end process;


    mat_b_2_V_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then 
            mat_b_2_V_ce0 <= ap_const_logic_1;
        else 
            mat_b_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mat_b_2_V_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln43_3_i_reg_972_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((trunc_ln43_3_i_reg_972_pp1_iter1_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            mat_b_2_V_we0 <= ap_const_logic_1;
        else 
            mat_b_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mat_b_3_V_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp2_stage0, zext_ln55_reg_1020, ap_enable_reg_pp2_iter1, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0, zext_ln43_2_fu_727_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            mat_b_3_V_address0 <= zext_ln55_reg_1020(2 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            mat_b_3_V_address0 <= zext_ln43_2_fu_727_p1(2 - 1 downto 0);
        else 
            mat_b_3_V_address0 <= "XX";
        end if; 
    end process;


    mat_b_3_V_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then 
            mat_b_3_V_ce0 <= ap_const_logic_1;
        else 
            mat_b_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mat_b_3_V_we0_assign_proc : process(ap_block_pp1_stage0_11001, trunc_ln43_3_i_reg_972_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((trunc_ln43_3_i_reg_972_pp1_iter1_reg = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            mat_b_3_V_we0 <= ap_const_logic_1;
        else 
            mat_b_3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mat_p_V_address0_assign_proc : process(ap_block_pp3_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_enable_reg_pp2_iter8, ap_block_pp2_stage0, zext_ln321_1_fu_816_p1, zext_ln69_3_fu_885_p1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            mat_p_V_address0 <= zext_ln69_3_fu_885_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter8 = ap_const_logic_1))) then 
            mat_p_V_address0 <= zext_ln321_1_fu_816_p1(4 - 1 downto 0);
        else 
            mat_p_V_address0 <= "XXXX";
        end if; 
    end process;


    mat_p_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0, ap_enable_reg_pp2_iter8)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter8 = ap_const_logic_1)))) then 
            mat_p_V_ce0 <= ap_const_logic_1;
        else 
            mat_p_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mat_p_V_d0 <= std_logic_vector(unsigned(add_ln700_reg_1121) + unsigned(add_ln700_1_fu_821_p2));

    mat_p_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln47_reg_984_pp2_iter7_reg, ap_enable_reg_pp2_iter8)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter8 = ap_const_logic_1) and (icmp_ln47_reg_984_pp2_iter7_reg = ap_const_lv1_0))) then 
            mat_p_V_we0 <= ap_const_logic_1;
        else 
            mat_p_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_port_in_V_blk_n_AR_assign_proc : process(m_axi_mem_port_in_V_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            mem_port_in_V_blk_n_AR <= m_axi_mem_port_in_V_ARREADY;
        else 
            mem_port_in_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    mem_port_in_V_blk_n_AW_assign_proc : process(m_axi_mem_port_in_V_AWREADY, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            mem_port_in_V_blk_n_AW <= m_axi_mem_port_in_V_AWREADY;
        else 
            mem_port_in_V_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    mem_port_in_V_blk_n_B_assign_proc : process(m_axi_mem_port_in_V_BVALID, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            mem_port_in_V_blk_n_B <= m_axi_mem_port_in_V_BVALID;
        else 
            mem_port_in_V_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    mem_port_in_V_blk_n_R_assign_proc : process(m_axi_mem_port_in_V_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if ((((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            mem_port_in_V_blk_n_R <= m_axi_mem_port_in_V_RVALID;
        else 
            mem_port_in_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    mem_port_in_V_blk_n_W_assign_proc : process(m_axi_mem_port_in_V_WREADY, ap_enable_reg_pp3_iter2, ap_block_pp3_stage0, icmp_ln69_reg_1137_pp3_iter1_reg)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (icmp_ln69_reg_1137_pp3_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            mem_port_in_V_blk_n_W <= m_axi_mem_port_in_V_WREADY;
        else 
            mem_port_in_V_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    mem_port_in_V_offset_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mem_port_in_V_offset_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mem_port_in_V_offset_blk_n <= mem_port_in_V_offset_empty_n;
        else 
            mem_port_in_V_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mem_port_in_V_offset_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mem_port_in_V_offset_empty_n, mem_port_out_V_offset_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (mem_port_out_V_offset_empty_n = ap_const_logic_0) or (mem_port_in_V_offset_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mem_port_in_V_offset_read <= ap_const_logic_1;
        else 
            mem_port_in_V_offset_read <= ap_const_logic_0;
        end if; 
    end process;


    mem_port_out_V_offset_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mem_port_out_V_offset_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mem_port_out_V_offset_blk_n <= mem_port_out_V_offset_empty_n;
        else 
            mem_port_out_V_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mem_port_out_V_offset_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mem_port_in_V_offset_empty_n, mem_port_out_V_offset_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (mem_port_out_V_offset_empty_n = ap_const_logic_0) or (mem_port_in_V_offset_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mem_port_out_V_offset_read <= ap_const_logic_1;
        else 
            mem_port_out_V_offset_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln54_1_fu_766_p3 <= 
        add_ln47_1_fu_746_p2 when (icmp_ln48_fu_752_p2(0) = '1') else 
        ap_phi_mux_r_0_0_i_i_phi_fu_450_p4;
    select_ln54_fu_758_p3 <= 
        ap_const_lv3_0 when (icmp_ln48_fu_752_p2(0) = '1') else 
        c_0_0_i_i_reg_457;
    tmp_1_fu_610_p4 <= mem_port_in_V_offset_dout(31 downto 3);
    tmp_2_fu_673_p4 <= args1(31 downto 3);
    tmp_3_fu_831_p4 <= args2(31 downto 3);
    tmp_4_fu_844_p4 <= mem_port_out_V_offse_reg_890(31 downto 3);
    tmp_5_fu_796_p3 <= (select_ln54_1_reg_998_pp2_iter7_reg & ap_const_lv2_0);
    tmp_fu_596_p4 <= args0(31 downto 3);
    trunc_ln39_fu_662_p1 <= phi_ln39_i_i_reg_413(2 - 1 downto 0);
    trunc_ln43_fu_713_p1 <= phi_ln43_i_i_reg_424(2 - 1 downto 0);
    zext_ln321_1_fu_816_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln321_fu_810_p2),64));
    zext_ln321_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln54_reg_993_pp2_iter7_reg),6));
    zext_ln39_1_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_610_p4),30));
    zext_ln39_2_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln39_reg_900),64));
    zext_ln39_3_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln39_1_i_reg_930_pp0_iter1_reg),64));
    zext_ln39_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_596_p4),30));
    zext_ln43_1_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_reg_947),64));
    zext_ln43_2_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln43_reg_967_pp1_iter1_reg),64));
    zext_ln43_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_673_p4),30));
    zext_ln54_1_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln54_1_fu_766_p3),64));
    zext_ln54_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_796_p3),6));
    zext_ln55_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln54_fu_758_p3),64));
    zext_ln69_1_fu_853_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_844_p4),30));
    zext_ln69_2_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln69_reg_1126),64));
    zext_ln69_3_fu_885_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln69_i_i_reg_468),64));
    zext_ln69_fu_840_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_831_p4),30));
end behav;
