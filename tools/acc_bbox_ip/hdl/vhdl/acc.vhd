-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity acc is
generic (
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_BUS_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_MEM_BUS_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_BUS_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_BUS_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_MEM_BUS_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_BUS_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_BUS_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_BUS_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_BUS_USER_VALUE : INTEGER := 0;
    C_M_AXI_MEM_BUS_PROT_VALUE : INTEGER := 0;
    C_M_AXI_MEM_BUS_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_ctrl_bus_AWVALID : IN STD_LOGIC;
    s_axi_ctrl_bus_AWREADY : OUT STD_LOGIC;
    s_axi_ctrl_bus_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_bus_WVALID : IN STD_LOGIC;
    s_axi_ctrl_bus_WREADY : OUT STD_LOGIC;
    s_axi_ctrl_bus_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_bus_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_ctrl_bus_ARVALID : IN STD_LOGIC;
    s_axi_ctrl_bus_ARREADY : OUT STD_LOGIC;
    s_axi_ctrl_bus_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_bus_RVALID : OUT STD_LOGIC;
    s_axi_ctrl_bus_RREADY : IN STD_LOGIC;
    s_axi_ctrl_bus_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_bus_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_ctrl_bus_BVALID : OUT STD_LOGIC;
    s_axi_ctrl_bus_BREADY : IN STD_LOGIC;
    s_axi_ctrl_bus_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    m_axi_mem_bus_AWVALID : OUT STD_LOGIC;
    m_axi_mem_bus_AWREADY : IN STD_LOGIC;
    m_axi_mem_bus_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_BUS_ADDR_WIDTH-1 downto 0);
    m_axi_mem_bus_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_BUS_ID_WIDTH-1 downto 0);
    m_axi_mem_bus_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_bus_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_bus_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_bus_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_bus_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_bus_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_bus_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_bus_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_bus_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_BUS_AWUSER_WIDTH-1 downto 0);
    m_axi_mem_bus_WVALID : OUT STD_LOGIC;
    m_axi_mem_bus_WREADY : IN STD_LOGIC;
    m_axi_mem_bus_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_BUS_DATA_WIDTH-1 downto 0);
    m_axi_mem_bus_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_BUS_DATA_WIDTH/8-1 downto 0);
    m_axi_mem_bus_WLAST : OUT STD_LOGIC;
    m_axi_mem_bus_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_BUS_ID_WIDTH-1 downto 0);
    m_axi_mem_bus_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_BUS_WUSER_WIDTH-1 downto 0);
    m_axi_mem_bus_ARVALID : OUT STD_LOGIC;
    m_axi_mem_bus_ARREADY : IN STD_LOGIC;
    m_axi_mem_bus_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_BUS_ADDR_WIDTH-1 downto 0);
    m_axi_mem_bus_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_BUS_ID_WIDTH-1 downto 0);
    m_axi_mem_bus_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_bus_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_bus_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_bus_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_bus_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_bus_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_bus_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_bus_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_bus_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_BUS_ARUSER_WIDTH-1 downto 0);
    m_axi_mem_bus_RVALID : IN STD_LOGIC;
    m_axi_mem_bus_RREADY : OUT STD_LOGIC;
    m_axi_mem_bus_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_BUS_DATA_WIDTH-1 downto 0);
    m_axi_mem_bus_RLAST : IN STD_LOGIC;
    m_axi_mem_bus_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_BUS_ID_WIDTH-1 downto 0);
    m_axi_mem_bus_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_BUS_RUSER_WIDTH-1 downto 0);
    m_axi_mem_bus_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_bus_BVALID : IN STD_LOGIC;
    m_axi_mem_bus_BREADY : OUT STD_LOGIC;
    m_axi_mem_bus_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_bus_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_BUS_ID_WIDTH-1 downto 0);
    m_axi_mem_bus_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_BUS_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of acc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "acc,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=105,HLS_SYN_TPT=102,HLS_SYN_MEM=8,HLS_SYN_DSP=40,HLS_SYN_FF=5160,HLS_SYN_LUT=3610,HLS_VERSION=2019_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal args_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_in_V : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_out_V : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_bus_AWREADY : STD_LOGIC;
    signal mem_bus_WREADY : STD_LOGIC;
    signal mem_bus_ARREADY : STD_LOGIC;
    signal mem_bus_RVALID : STD_LOGIC;
    signal mem_bus_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal mem_bus_RLAST : STD_LOGIC;
    signal mem_bus_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_bus_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_bus_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_bus_BVALID : STD_LOGIC;
    signal mem_bus_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal mem_bus_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal mem_bus_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_proc4_U0_ap_start : STD_LOGIC;
    signal Block_proc4_U0_ap_done : STD_LOGIC;
    signal Block_proc4_U0_ap_continue : STD_LOGIC;
    signal Block_proc4_U0_ap_idle : STD_LOGIC;
    signal Block_proc4_U0_ap_ready : STD_LOGIC;
    signal Block_proc4_U0_args_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Block_proc4_U0_args_ce0 : STD_LOGIC;
    signal Block_proc4_U0_mem_in_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_proc4_U0_mem_in_V_out_write : STD_LOGIC;
    signal Block_proc4_U0_mem_out_V_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_proc4_U0_mem_out_V_out_write : STD_LOGIC;
    signal Block_proc4_U0_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_proc4_U0_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_proc4_U0_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_args_load_2_loc_chan : STD_LOGIC;
    signal args_load_2_loc_chan_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_args_load_2_loc_chan : STD_LOGIC := '0';
    signal ap_sync_channel_write_args_load_2_loc_chan : STD_LOGIC;
    signal ap_channel_done_args_load_1_loc_chan : STD_LOGIC;
    signal args_load_1_loc_chan_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_args_load_1_loc_chan : STD_LOGIC := '0';
    signal ap_sync_channel_write_args_load_1_loc_chan : STD_LOGIC;
    signal ap_channel_done_args_load_loc_channe : STD_LOGIC;
    signal args_load_loc_channe_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_args_load_loc_channe : STD_LOGIC := '0';
    signal ap_sync_channel_write_args_load_loc_channe : STD_LOGIC;
    signal acc_mod_U0_ap_start : STD_LOGIC;
    signal acc_mod_U0_ap_done : STD_LOGIC;
    signal acc_mod_U0_ap_continue : STD_LOGIC;
    signal acc_mod_U0_ap_idle : STD_LOGIC;
    signal acc_mod_U0_ap_ready : STD_LOGIC;
    signal acc_mod_U0_id : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_mod_U0_id_ap_vld : STD_LOGIC;
    signal acc_mod_U0_m_axi_mem_port_in_V_AWVALID : STD_LOGIC;
    signal acc_mod_U0_m_axi_mem_port_in_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_mod_U0_m_axi_mem_port_in_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_mod_U0_m_axi_mem_port_in_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_mod_U0_m_axi_mem_port_in_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_mod_U0_m_axi_mem_port_in_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal acc_mod_U0_m_axi_mem_port_in_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal acc_mod_U0_m_axi_mem_port_in_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal acc_mod_U0_m_axi_mem_port_in_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_mod_U0_m_axi_mem_port_in_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal acc_mod_U0_m_axi_mem_port_in_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal acc_mod_U0_m_axi_mem_port_in_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_mod_U0_m_axi_mem_port_in_V_WVALID : STD_LOGIC;
    signal acc_mod_U0_m_axi_mem_port_in_V_WDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal acc_mod_U0_m_axi_mem_port_in_V_WSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal acc_mod_U0_m_axi_mem_port_in_V_WLAST : STD_LOGIC;
    signal acc_mod_U0_m_axi_mem_port_in_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_mod_U0_m_axi_mem_port_in_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_mod_U0_m_axi_mem_port_in_V_ARVALID : STD_LOGIC;
    signal acc_mod_U0_m_axi_mem_port_in_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_mod_U0_m_axi_mem_port_in_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_mod_U0_m_axi_mem_port_in_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_mod_U0_m_axi_mem_port_in_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_mod_U0_m_axi_mem_port_in_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal acc_mod_U0_m_axi_mem_port_in_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal acc_mod_U0_m_axi_mem_port_in_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal acc_mod_U0_m_axi_mem_port_in_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_mod_U0_m_axi_mem_port_in_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal acc_mod_U0_m_axi_mem_port_in_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal acc_mod_U0_m_axi_mem_port_in_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_mod_U0_m_axi_mem_port_in_V_RREADY : STD_LOGIC;
    signal acc_mod_U0_m_axi_mem_port_in_V_BREADY : STD_LOGIC;
    signal acc_mod_U0_mem_port_in_V_offset_read : STD_LOGIC;
    signal acc_mod_U0_mem_port_out_V_offset_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal mem_in_V_c_full_n : STD_LOGIC;
    signal mem_in_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_in_V_c_empty_n : STD_LOGIC;
    signal mem_out_V_c_full_n : STD_LOGIC;
    signal mem_out_V_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_out_V_c_empty_n : STD_LOGIC;
    signal args_load_loc_channe_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal args_load_loc_channe_empty_n : STD_LOGIC;
    signal args_load_1_loc_chan_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal args_load_1_loc_chan_empty_n : STD_LOGIC;
    signal args_load_2_loc_chan_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal args_load_2_loc_chan_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_Block_proc4_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Block_proc4_U0_ap_ready : STD_LOGIC;
    signal Block_proc4_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_acc_mod_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_acc_mod_U0_ap_ready : STD_LOGIC;
    signal acc_mod_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal Block_proc4_U0_start_full_n : STD_LOGIC;
    signal Block_proc4_U0_start_write : STD_LOGIC;
    signal acc_mod_U0_start_full_n : STD_LOGIC;
    signal acc_mod_U0_start_write : STD_LOGIC;

    component Block_proc4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        args_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        args_ce0 : OUT STD_LOGIC;
        args_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        mem_in_V : IN STD_LOGIC_VECTOR (31 downto 0);
        mem_out_V : IN STD_LOGIC_VECTOR (31 downto 0);
        mem_in_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        mem_in_V_out_full_n : IN STD_LOGIC;
        mem_in_V_out_write : OUT STD_LOGIC;
        mem_out_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        mem_out_V_out_full_n : IN STD_LOGIC;
        mem_out_V_out_write : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component acc_mod IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        id : OUT STD_LOGIC_VECTOR (31 downto 0);
        id_ap_vld : OUT STD_LOGIC;
        m_axi_mem_port_in_V_AWVALID : OUT STD_LOGIC;
        m_axi_mem_port_in_V_AWREADY : IN STD_LOGIC;
        m_axi_mem_port_in_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_port_in_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_port_in_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_port_in_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_port_in_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_port_in_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_port_in_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_port_in_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_port_in_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_port_in_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_port_in_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_port_in_V_WVALID : OUT STD_LOGIC;
        m_axi_mem_port_in_V_WREADY : IN STD_LOGIC;
        m_axi_mem_port_in_V_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_mem_port_in_V_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_mem_port_in_V_WLAST : OUT STD_LOGIC;
        m_axi_mem_port_in_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_port_in_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_port_in_V_ARVALID : OUT STD_LOGIC;
        m_axi_mem_port_in_V_ARREADY : IN STD_LOGIC;
        m_axi_mem_port_in_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_port_in_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_port_in_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_port_in_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_port_in_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_port_in_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_port_in_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_port_in_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_port_in_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_port_in_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_port_in_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_port_in_V_RVALID : IN STD_LOGIC;
        m_axi_mem_port_in_V_RREADY : OUT STD_LOGIC;
        m_axi_mem_port_in_V_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_mem_port_in_V_RLAST : IN STD_LOGIC;
        m_axi_mem_port_in_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_port_in_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_port_in_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_port_in_V_BVALID : IN STD_LOGIC;
        m_axi_mem_port_in_V_BREADY : OUT STD_LOGIC;
        m_axi_mem_port_in_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_port_in_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_port_in_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        mem_port_in_V_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        mem_port_in_V_offset_empty_n : IN STD_LOGIC;
        mem_port_in_V_offset_read : OUT STD_LOGIC;
        mem_port_out_V_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        mem_port_out_V_offset_empty_n : IN STD_LOGIC;
        mem_port_out_V_offset_read : OUT STD_LOGIC;
        args0 : IN STD_LOGIC_VECTOR (31 downto 0);
        args1 : IN STD_LOGIC_VECTOR (31 downto 0);
        args2 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component acc_ctrl_bus_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        id : IN STD_LOGIC_VECTOR (31 downto 0);
        id_ap_vld : IN STD_LOGIC;
        args_address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        args_ce0 : IN STD_LOGIC;
        args_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        mem_in_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        mem_out_V : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component acc_mem_bus_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;

       attribute black_box : string;
       attribute black_box of behav : architecture is "true";

begin
    acc_ctrl_bus_s_axi_U : component acc_ctrl_bus_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_ctrl_bus_AWVALID,
        AWREADY => s_axi_ctrl_bus_AWREADY,
        AWADDR => s_axi_ctrl_bus_AWADDR,
        WVALID => s_axi_ctrl_bus_WVALID,
        WREADY => s_axi_ctrl_bus_WREADY,
        WDATA => s_axi_ctrl_bus_WDATA,
        WSTRB => s_axi_ctrl_bus_WSTRB,
        ARVALID => s_axi_ctrl_bus_ARVALID,
        ARREADY => s_axi_ctrl_bus_ARREADY,
        ARADDR => s_axi_ctrl_bus_ARADDR,
        RVALID => s_axi_ctrl_bus_RVALID,
        RREADY => s_axi_ctrl_bus_RREADY,
        RDATA => s_axi_ctrl_bus_RDATA,
        RRESP => s_axi_ctrl_bus_RRESP,
        BVALID => s_axi_ctrl_bus_BVALID,
        BREADY => s_axi_ctrl_bus_BREADY,
        BRESP => s_axi_ctrl_bus_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        id => acc_mod_U0_id,
        id_ap_vld => acc_mod_U0_id_ap_vld,
        args_address0 => Block_proc4_U0_args_address0,
        args_ce0 => Block_proc4_U0_args_ce0,
        args_q0 => args_q0,
        mem_in_V => mem_in_V,
        mem_out_V => mem_out_V);

    acc_mem_bus_m_axi_U : component acc_mem_bus_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 64,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_MEM_BUS_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MEM_BUS_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MEM_BUS_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MEM_BUS_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MEM_BUS_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MEM_BUS_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MEM_BUS_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MEM_BUS_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_MEM_BUS_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MEM_BUS_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MEM_BUS_CACHE_VALUE)
    port map (
        AWVALID => m_axi_mem_bus_AWVALID,
        AWREADY => m_axi_mem_bus_AWREADY,
        AWADDR => m_axi_mem_bus_AWADDR,
        AWID => m_axi_mem_bus_AWID,
        AWLEN => m_axi_mem_bus_AWLEN,
        AWSIZE => m_axi_mem_bus_AWSIZE,
        AWBURST => m_axi_mem_bus_AWBURST,
        AWLOCK => m_axi_mem_bus_AWLOCK,
        AWCACHE => m_axi_mem_bus_AWCACHE,
        AWPROT => m_axi_mem_bus_AWPROT,
        AWQOS => m_axi_mem_bus_AWQOS,
        AWREGION => m_axi_mem_bus_AWREGION,
        AWUSER => m_axi_mem_bus_AWUSER,
        WVALID => m_axi_mem_bus_WVALID,
        WREADY => m_axi_mem_bus_WREADY,
        WDATA => m_axi_mem_bus_WDATA,
        WSTRB => m_axi_mem_bus_WSTRB,
        WLAST => m_axi_mem_bus_WLAST,
        WID => m_axi_mem_bus_WID,
        WUSER => m_axi_mem_bus_WUSER,
        ARVALID => m_axi_mem_bus_ARVALID,
        ARREADY => m_axi_mem_bus_ARREADY,
        ARADDR => m_axi_mem_bus_ARADDR,
        ARID => m_axi_mem_bus_ARID,
        ARLEN => m_axi_mem_bus_ARLEN,
        ARSIZE => m_axi_mem_bus_ARSIZE,
        ARBURST => m_axi_mem_bus_ARBURST,
        ARLOCK => m_axi_mem_bus_ARLOCK,
        ARCACHE => m_axi_mem_bus_ARCACHE,
        ARPROT => m_axi_mem_bus_ARPROT,
        ARQOS => m_axi_mem_bus_ARQOS,
        ARREGION => m_axi_mem_bus_ARREGION,
        ARUSER => m_axi_mem_bus_ARUSER,
        RVALID => m_axi_mem_bus_RVALID,
        RREADY => m_axi_mem_bus_RREADY,
        RDATA => m_axi_mem_bus_RDATA,
        RLAST => m_axi_mem_bus_RLAST,
        RID => m_axi_mem_bus_RID,
        RUSER => m_axi_mem_bus_RUSER,
        RRESP => m_axi_mem_bus_RRESP,
        BVALID => m_axi_mem_bus_BVALID,
        BREADY => m_axi_mem_bus_BREADY,
        BRESP => m_axi_mem_bus_BRESP,
        BID => m_axi_mem_bus_BID,
        BUSER => m_axi_mem_bus_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => acc_mod_U0_m_axi_mem_port_in_V_ARVALID,
        I_ARREADY => mem_bus_ARREADY,
        I_ARADDR => acc_mod_U0_m_axi_mem_port_in_V_ARADDR,
        I_ARID => acc_mod_U0_m_axi_mem_port_in_V_ARID,
        I_ARLEN => acc_mod_U0_m_axi_mem_port_in_V_ARLEN,
        I_ARSIZE => acc_mod_U0_m_axi_mem_port_in_V_ARSIZE,
        I_ARLOCK => acc_mod_U0_m_axi_mem_port_in_V_ARLOCK,
        I_ARCACHE => acc_mod_U0_m_axi_mem_port_in_V_ARCACHE,
        I_ARQOS => acc_mod_U0_m_axi_mem_port_in_V_ARQOS,
        I_ARPROT => acc_mod_U0_m_axi_mem_port_in_V_ARPROT,
        I_ARUSER => acc_mod_U0_m_axi_mem_port_in_V_ARUSER,
        I_ARBURST => acc_mod_U0_m_axi_mem_port_in_V_ARBURST,
        I_ARREGION => acc_mod_U0_m_axi_mem_port_in_V_ARREGION,
        I_RVALID => mem_bus_RVALID,
        I_RREADY => acc_mod_U0_m_axi_mem_port_in_V_RREADY,
        I_RDATA => mem_bus_RDATA,
        I_RID => mem_bus_RID,
        I_RUSER => mem_bus_RUSER,
        I_RRESP => mem_bus_RRESP,
        I_RLAST => mem_bus_RLAST,
        I_AWVALID => acc_mod_U0_m_axi_mem_port_in_V_AWVALID,
        I_AWREADY => mem_bus_AWREADY,
        I_AWADDR => acc_mod_U0_m_axi_mem_port_in_V_AWADDR,
        I_AWID => acc_mod_U0_m_axi_mem_port_in_V_AWID,
        I_AWLEN => acc_mod_U0_m_axi_mem_port_in_V_AWLEN,
        I_AWSIZE => acc_mod_U0_m_axi_mem_port_in_V_AWSIZE,
        I_AWLOCK => acc_mod_U0_m_axi_mem_port_in_V_AWLOCK,
        I_AWCACHE => acc_mod_U0_m_axi_mem_port_in_V_AWCACHE,
        I_AWQOS => acc_mod_U0_m_axi_mem_port_in_V_AWQOS,
        I_AWPROT => acc_mod_U0_m_axi_mem_port_in_V_AWPROT,
        I_AWUSER => acc_mod_U0_m_axi_mem_port_in_V_AWUSER,
        I_AWBURST => acc_mod_U0_m_axi_mem_port_in_V_AWBURST,
        I_AWREGION => acc_mod_U0_m_axi_mem_port_in_V_AWREGION,
        I_WVALID => acc_mod_U0_m_axi_mem_port_in_V_WVALID,
        I_WREADY => mem_bus_WREADY,
        I_WDATA => acc_mod_U0_m_axi_mem_port_in_V_WDATA,
        I_WID => acc_mod_U0_m_axi_mem_port_in_V_WID,
        I_WUSER => acc_mod_U0_m_axi_mem_port_in_V_WUSER,
        I_WLAST => acc_mod_U0_m_axi_mem_port_in_V_WLAST,
        I_WSTRB => acc_mod_U0_m_axi_mem_port_in_V_WSTRB,
        I_BVALID => mem_bus_BVALID,
        I_BREADY => acc_mod_U0_m_axi_mem_port_in_V_BREADY,
        I_BRESP => mem_bus_BRESP,
        I_BID => mem_bus_BID,
        I_BUSER => mem_bus_BUSER);

    Block_proc4_U0 : component Block_proc4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_proc4_U0_ap_start,
        ap_done => Block_proc4_U0_ap_done,
        ap_continue => Block_proc4_U0_ap_continue,
        ap_idle => Block_proc4_U0_ap_idle,
        ap_ready => Block_proc4_U0_ap_ready,
        args_address0 => Block_proc4_U0_args_address0,
        args_ce0 => Block_proc4_U0_args_ce0,
        args_q0 => args_q0,
        mem_in_V => mem_in_V,
        mem_out_V => mem_out_V,
        mem_in_V_out_din => Block_proc4_U0_mem_in_V_out_din,
        mem_in_V_out_full_n => mem_in_V_c_full_n,
        mem_in_V_out_write => Block_proc4_U0_mem_in_V_out_write,
        mem_out_V_out_din => Block_proc4_U0_mem_out_V_out_din,
        mem_out_V_out_full_n => mem_out_V_c_full_n,
        mem_out_V_out_write => Block_proc4_U0_mem_out_V_out_write,
        ap_return_0 => Block_proc4_U0_ap_return_0,
        ap_return_1 => Block_proc4_U0_ap_return_1,
        ap_return_2 => Block_proc4_U0_ap_return_2);

    acc_mod_U0 : component acc_mod
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => acc_mod_U0_ap_start,
        ap_done => acc_mod_U0_ap_done,
        ap_continue => acc_mod_U0_ap_continue,
        ap_idle => acc_mod_U0_ap_idle,
        ap_ready => acc_mod_U0_ap_ready,
        id => acc_mod_U0_id,
        id_ap_vld => acc_mod_U0_id_ap_vld,
        m_axi_mem_port_in_V_AWVALID => acc_mod_U0_m_axi_mem_port_in_V_AWVALID,
        m_axi_mem_port_in_V_AWREADY => mem_bus_AWREADY,
        m_axi_mem_port_in_V_AWADDR => acc_mod_U0_m_axi_mem_port_in_V_AWADDR,
        m_axi_mem_port_in_V_AWID => acc_mod_U0_m_axi_mem_port_in_V_AWID,
        m_axi_mem_port_in_V_AWLEN => acc_mod_U0_m_axi_mem_port_in_V_AWLEN,
        m_axi_mem_port_in_V_AWSIZE => acc_mod_U0_m_axi_mem_port_in_V_AWSIZE,
        m_axi_mem_port_in_V_AWBURST => acc_mod_U0_m_axi_mem_port_in_V_AWBURST,
        m_axi_mem_port_in_V_AWLOCK => acc_mod_U0_m_axi_mem_port_in_V_AWLOCK,
        m_axi_mem_port_in_V_AWCACHE => acc_mod_U0_m_axi_mem_port_in_V_AWCACHE,
        m_axi_mem_port_in_V_AWPROT => acc_mod_U0_m_axi_mem_port_in_V_AWPROT,
        m_axi_mem_port_in_V_AWQOS => acc_mod_U0_m_axi_mem_port_in_V_AWQOS,
        m_axi_mem_port_in_V_AWREGION => acc_mod_U0_m_axi_mem_port_in_V_AWREGION,
        m_axi_mem_port_in_V_AWUSER => acc_mod_U0_m_axi_mem_port_in_V_AWUSER,
        m_axi_mem_port_in_V_WVALID => acc_mod_U0_m_axi_mem_port_in_V_WVALID,
        m_axi_mem_port_in_V_WREADY => mem_bus_WREADY,
        m_axi_mem_port_in_V_WDATA => acc_mod_U0_m_axi_mem_port_in_V_WDATA,
        m_axi_mem_port_in_V_WSTRB => acc_mod_U0_m_axi_mem_port_in_V_WSTRB,
        m_axi_mem_port_in_V_WLAST => acc_mod_U0_m_axi_mem_port_in_V_WLAST,
        m_axi_mem_port_in_V_WID => acc_mod_U0_m_axi_mem_port_in_V_WID,
        m_axi_mem_port_in_V_WUSER => acc_mod_U0_m_axi_mem_port_in_V_WUSER,
        m_axi_mem_port_in_V_ARVALID => acc_mod_U0_m_axi_mem_port_in_V_ARVALID,
        m_axi_mem_port_in_V_ARREADY => mem_bus_ARREADY,
        m_axi_mem_port_in_V_ARADDR => acc_mod_U0_m_axi_mem_port_in_V_ARADDR,
        m_axi_mem_port_in_V_ARID => acc_mod_U0_m_axi_mem_port_in_V_ARID,
        m_axi_mem_port_in_V_ARLEN => acc_mod_U0_m_axi_mem_port_in_V_ARLEN,
        m_axi_mem_port_in_V_ARSIZE => acc_mod_U0_m_axi_mem_port_in_V_ARSIZE,
        m_axi_mem_port_in_V_ARBURST => acc_mod_U0_m_axi_mem_port_in_V_ARBURST,
        m_axi_mem_port_in_V_ARLOCK => acc_mod_U0_m_axi_mem_port_in_V_ARLOCK,
        m_axi_mem_port_in_V_ARCACHE => acc_mod_U0_m_axi_mem_port_in_V_ARCACHE,
        m_axi_mem_port_in_V_ARPROT => acc_mod_U0_m_axi_mem_port_in_V_ARPROT,
        m_axi_mem_port_in_V_ARQOS => acc_mod_U0_m_axi_mem_port_in_V_ARQOS,
        m_axi_mem_port_in_V_ARREGION => acc_mod_U0_m_axi_mem_port_in_V_ARREGION,
        m_axi_mem_port_in_V_ARUSER => acc_mod_U0_m_axi_mem_port_in_V_ARUSER,
        m_axi_mem_port_in_V_RVALID => mem_bus_RVALID,
        m_axi_mem_port_in_V_RREADY => acc_mod_U0_m_axi_mem_port_in_V_RREADY,
        m_axi_mem_port_in_V_RDATA => mem_bus_RDATA,
        m_axi_mem_port_in_V_RLAST => mem_bus_RLAST,
        m_axi_mem_port_in_V_RID => mem_bus_RID,
        m_axi_mem_port_in_V_RUSER => mem_bus_RUSER,
        m_axi_mem_port_in_V_RRESP => mem_bus_RRESP,
        m_axi_mem_port_in_V_BVALID => mem_bus_BVALID,
        m_axi_mem_port_in_V_BREADY => acc_mod_U0_m_axi_mem_port_in_V_BREADY,
        m_axi_mem_port_in_V_BRESP => mem_bus_BRESP,
        m_axi_mem_port_in_V_BID => mem_bus_BID,
        m_axi_mem_port_in_V_BUSER => mem_bus_BUSER,
        mem_port_in_V_offset_dout => mem_in_V_c_dout,
        mem_port_in_V_offset_empty_n => mem_in_V_c_empty_n,
        mem_port_in_V_offset_read => acc_mod_U0_mem_port_in_V_offset_read,
        mem_port_out_V_offset_dout => mem_out_V_c_dout,
        mem_port_out_V_offset_empty_n => mem_out_V_c_empty_n,
        mem_port_out_V_offset_read => acc_mod_U0_mem_port_out_V_offset_read,
        args0 => args_load_loc_channe_dout,
        args1 => args_load_1_loc_chan_dout,
        args2 => args_load_2_loc_chan_dout);

    mem_in_V_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc4_U0_mem_in_V_out_din,
        if_full_n => mem_in_V_c_full_n,
        if_write => Block_proc4_U0_mem_in_V_out_write,
        if_dout => mem_in_V_c_dout,
        if_empty_n => mem_in_V_c_empty_n,
        if_read => acc_mod_U0_mem_port_in_V_offset_read);

    mem_out_V_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc4_U0_mem_out_V_out_din,
        if_full_n => mem_out_V_c_full_n,
        if_write => Block_proc4_U0_mem_out_V_out_write,
        if_dout => mem_out_V_c_dout,
        if_empty_n => mem_out_V_c_empty_n,
        if_read => acc_mod_U0_mem_port_out_V_offset_read);

    args_load_loc_channe_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc4_U0_ap_return_0,
        if_full_n => args_load_loc_channe_full_n,
        if_write => ap_channel_done_args_load_loc_channe,
        if_dout => args_load_loc_channe_dout,
        if_empty_n => args_load_loc_channe_empty_n,
        if_read => acc_mod_U0_ap_ready);

    args_load_1_loc_chan_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc4_U0_ap_return_1,
        if_full_n => args_load_1_loc_chan_full_n,
        if_write => ap_channel_done_args_load_1_loc_chan,
        if_dout => args_load_1_loc_chan_dout,
        if_empty_n => args_load_1_loc_chan_empty_n,
        if_read => acc_mod_U0_ap_ready);

    args_load_2_loc_chan_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc4_U0_ap_return_2,
        if_full_n => args_load_2_loc_chan_full_n,
        if_write => ap_channel_done_args_load_2_loc_chan,
        if_dout => args_load_2_loc_chan_dout,
        if_empty_n => args_load_2_loc_chan_empty_n,
        if_read => acc_mod_U0_ap_ready);





    ap_sync_reg_Block_proc4_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Block_proc4_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Block_proc4_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Block_proc4_U0_ap_ready <= ap_sync_Block_proc4_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_acc_mod_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_acc_mod_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_acc_mod_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_acc_mod_U0_ap_ready <= ap_sync_acc_mod_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_args_load_1_loc_chan_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_args_load_1_loc_chan <= ap_const_logic_0;
            else
                if (((Block_proc4_U0_ap_done and Block_proc4_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_args_load_1_loc_chan <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_args_load_1_loc_chan <= ap_sync_channel_write_args_load_1_loc_chan;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_args_load_2_loc_chan_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_args_load_2_loc_chan <= ap_const_logic_0;
            else
                if (((Block_proc4_U0_ap_done and Block_proc4_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_args_load_2_loc_chan <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_args_load_2_loc_chan <= ap_sync_channel_write_args_load_2_loc_chan;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_args_load_loc_channe_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_args_load_loc_channe <= ap_const_logic_0;
            else
                if (((Block_proc4_U0_ap_done and Block_proc4_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_args_load_loc_channe <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_args_load_loc_channe <= ap_sync_channel_write_args_load_loc_channe;
                end if; 
            end if;
        end if;
    end process;


    Block_proc4_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = Block_proc4_U0_ap_ready))) then 
                Block_proc4_U0_ap_ready_count <= std_logic_vector(unsigned(Block_proc4_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Block_proc4_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                Block_proc4_U0_ap_ready_count <= std_logic_vector(unsigned(Block_proc4_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    acc_mod_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = acc_mod_U0_ap_ready))) then 
                acc_mod_U0_ap_ready_count <= std_logic_vector(unsigned(acc_mod_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = acc_mod_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                acc_mod_U0_ap_ready_count <= std_logic_vector(unsigned(acc_mod_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    Block_proc4_U0_ap_continue <= (ap_sync_channel_write_args_load_loc_channe and ap_sync_channel_write_args_load_2_loc_chan and ap_sync_channel_write_args_load_1_loc_chan);
    Block_proc4_U0_ap_start <= ((ap_sync_reg_Block_proc4_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Block_proc4_U0_start_full_n <= ap_const_logic_1;
    Block_proc4_U0_start_write <= ap_const_logic_0;
    acc_mod_U0_ap_continue <= ap_const_logic_1;
    acc_mod_U0_ap_start <= ((ap_sync_reg_acc_mod_U0_ap_ready xor ap_const_logic_1) and args_load_loc_channe_empty_n and args_load_2_loc_chan_empty_n and args_load_1_loc_chan_empty_n and ap_start);
    acc_mod_U0_start_full_n <= ap_const_logic_1;
    acc_mod_U0_start_write <= ap_const_logic_0;
    ap_channel_done_args_load_1_loc_chan <= ((ap_sync_reg_channel_write_args_load_1_loc_chan xor ap_const_logic_1) and Block_proc4_U0_ap_done);
    ap_channel_done_args_load_2_loc_chan <= ((ap_sync_reg_channel_write_args_load_2_loc_chan xor ap_const_logic_1) and Block_proc4_U0_ap_done);
    ap_channel_done_args_load_loc_channe <= ((ap_sync_reg_channel_write_args_load_loc_channe xor ap_const_logic_1) and Block_proc4_U0_ap_done);
    ap_done <= acc_mod_U0_ap_done;
    ap_idle <= ((args_load_2_loc_chan_empty_n xor ap_const_logic_1) and (args_load_1_loc_chan_empty_n xor ap_const_logic_1) and (args_load_loc_channe_empty_n xor ap_const_logic_1) and acc_mod_U0_ap_idle and Block_proc4_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_Block_proc4_U0_ap_ready <= (ap_sync_reg_Block_proc4_U0_ap_ready or Block_proc4_U0_ap_ready);
    ap_sync_acc_mod_U0_ap_ready <= (ap_sync_reg_acc_mod_U0_ap_ready or acc_mod_U0_ap_ready);
    ap_sync_channel_write_args_load_1_loc_chan <= ((args_load_1_loc_chan_full_n and ap_channel_done_args_load_1_loc_chan) or ap_sync_reg_channel_write_args_load_1_loc_chan);
    ap_sync_channel_write_args_load_2_loc_chan <= ((args_load_2_loc_chan_full_n and ap_channel_done_args_load_2_loc_chan) or ap_sync_reg_channel_write_args_load_2_loc_chan);
    ap_sync_channel_write_args_load_loc_channe <= ((args_load_loc_channe_full_n and ap_channel_done_args_load_loc_channe) or ap_sync_reg_channel_write_args_load_loc_channe);
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= acc_mod_U0_ap_done;
    ap_sync_ready <= (ap_sync_acc_mod_U0_ap_ready and ap_sync_Block_proc4_U0_ap_ready);
end behav;
