// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(*BLACK_BOX*)
(* CORE_GENERATION_INFO="acc,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=105,HLS_SYN_TPT=102,HLS_SYN_MEM=8,HLS_SYN_DSP=40,HLS_SYN_FF=5160,HLS_SYN_LUT=3610,HLS_VERSION=2019_2}" *)

module acc (
        s_axi_ctrl_bus_AWVALID,
        s_axi_ctrl_bus_AWREADY,
        s_axi_ctrl_bus_AWADDR,
        s_axi_ctrl_bus_WVALID,
        s_axi_ctrl_bus_WREADY,
        s_axi_ctrl_bus_WDATA,
        s_axi_ctrl_bus_WSTRB,
        s_axi_ctrl_bus_ARVALID,
        s_axi_ctrl_bus_ARREADY,
        s_axi_ctrl_bus_ARADDR,
        s_axi_ctrl_bus_RVALID,
        s_axi_ctrl_bus_RREADY,
        s_axi_ctrl_bus_RDATA,
        s_axi_ctrl_bus_RRESP,
        s_axi_ctrl_bus_BVALID,
        s_axi_ctrl_bus_BREADY,
        s_axi_ctrl_bus_BRESP,
        ap_clk,
        ap_rst_n,
        interrupt,
        m_axi_mem_bus_AWVALID,
        m_axi_mem_bus_AWREADY,
        m_axi_mem_bus_AWADDR,
        m_axi_mem_bus_AWID,
        m_axi_mem_bus_AWLEN,
        m_axi_mem_bus_AWSIZE,
        m_axi_mem_bus_AWBURST,
        m_axi_mem_bus_AWLOCK,
        m_axi_mem_bus_AWCACHE,
        m_axi_mem_bus_AWPROT,
        m_axi_mem_bus_AWQOS,
        m_axi_mem_bus_AWREGION,
        m_axi_mem_bus_AWUSER,
        m_axi_mem_bus_WVALID,
        m_axi_mem_bus_WREADY,
        m_axi_mem_bus_WDATA,
        m_axi_mem_bus_WSTRB,
        m_axi_mem_bus_WLAST,
        m_axi_mem_bus_WID,
        m_axi_mem_bus_WUSER,
        m_axi_mem_bus_ARVALID,
        m_axi_mem_bus_ARREADY,
        m_axi_mem_bus_ARADDR,
        m_axi_mem_bus_ARID,
        m_axi_mem_bus_ARLEN,
        m_axi_mem_bus_ARSIZE,
        m_axi_mem_bus_ARBURST,
        m_axi_mem_bus_ARLOCK,
        m_axi_mem_bus_ARCACHE,
        m_axi_mem_bus_ARPROT,
        m_axi_mem_bus_ARQOS,
        m_axi_mem_bus_ARREGION,
        m_axi_mem_bus_ARUSER,
        m_axi_mem_bus_RVALID,
        m_axi_mem_bus_RREADY,
        m_axi_mem_bus_RDATA,
        m_axi_mem_bus_RLAST,
        m_axi_mem_bus_RID,
        m_axi_mem_bus_RUSER,
        m_axi_mem_bus_RRESP,
        m_axi_mem_bus_BVALID,
        m_axi_mem_bus_BREADY,
        m_axi_mem_bus_BRESP,
        m_axi_mem_bus_BID,
        m_axi_mem_bus_BUSER
);

parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_ADDR_WIDTH = 32;
parameter    C_M_AXI_MEM_BUS_ID_WIDTH = 1;
parameter    C_M_AXI_MEM_BUS_ADDR_WIDTH = 32;
parameter    C_M_AXI_MEM_BUS_DATA_WIDTH = 64;
parameter    C_M_AXI_MEM_BUS_AWUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_BUS_ARUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_BUS_WUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_BUS_RUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_BUS_BUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_BUS_USER_VALUE = 0;
parameter    C_M_AXI_MEM_BUS_PROT_VALUE = 0;
parameter    C_M_AXI_MEM_BUS_CACHE_VALUE = 3;
parameter    C_M_AXI_ID_WIDTH = 1;
parameter    C_M_AXI_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_AWUSER_WIDTH = 1;
parameter    C_M_AXI_ARUSER_WIDTH = 1;
parameter    C_M_AXI_WUSER_WIDTH = 1;
parameter    C_M_AXI_RUSER_WIDTH = 1;
parameter    C_M_AXI_BUSER_WIDTH = 1;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_MEM_BUS_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   s_axi_ctrl_bus_AWVALID;
output   s_axi_ctrl_bus_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_ctrl_bus_AWADDR;
input   s_axi_ctrl_bus_WVALID;
output   s_axi_ctrl_bus_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_ctrl_bus_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_ctrl_bus_WSTRB;
input   s_axi_ctrl_bus_ARVALID;
output   s_axi_ctrl_bus_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_ctrl_bus_ARADDR;
output   s_axi_ctrl_bus_RVALID;
input   s_axi_ctrl_bus_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_ctrl_bus_RDATA;
output  [1:0] s_axi_ctrl_bus_RRESP;
output   s_axi_ctrl_bus_BVALID;
input   s_axi_ctrl_bus_BREADY;
output  [1:0] s_axi_ctrl_bus_BRESP;
input   ap_clk;
input   ap_rst_n;
output   interrupt;
output   m_axi_mem_bus_AWVALID;
input   m_axi_mem_bus_AWREADY;
output  [C_M_AXI_MEM_BUS_ADDR_WIDTH - 1:0] m_axi_mem_bus_AWADDR;
output  [C_M_AXI_MEM_BUS_ID_WIDTH - 1:0] m_axi_mem_bus_AWID;
output  [7:0] m_axi_mem_bus_AWLEN;
output  [2:0] m_axi_mem_bus_AWSIZE;
output  [1:0] m_axi_mem_bus_AWBURST;
output  [1:0] m_axi_mem_bus_AWLOCK;
output  [3:0] m_axi_mem_bus_AWCACHE;
output  [2:0] m_axi_mem_bus_AWPROT;
output  [3:0] m_axi_mem_bus_AWQOS;
output  [3:0] m_axi_mem_bus_AWREGION;
output  [C_M_AXI_MEM_BUS_AWUSER_WIDTH - 1:0] m_axi_mem_bus_AWUSER;
output   m_axi_mem_bus_WVALID;
input   m_axi_mem_bus_WREADY;
output  [C_M_AXI_MEM_BUS_DATA_WIDTH - 1:0] m_axi_mem_bus_WDATA;
output  [C_M_AXI_MEM_BUS_WSTRB_WIDTH - 1:0] m_axi_mem_bus_WSTRB;
output   m_axi_mem_bus_WLAST;
output  [C_M_AXI_MEM_BUS_ID_WIDTH - 1:0] m_axi_mem_bus_WID;
output  [C_M_AXI_MEM_BUS_WUSER_WIDTH - 1:0] m_axi_mem_bus_WUSER;
output   m_axi_mem_bus_ARVALID;
input   m_axi_mem_bus_ARREADY;
output  [C_M_AXI_MEM_BUS_ADDR_WIDTH - 1:0] m_axi_mem_bus_ARADDR;
output  [C_M_AXI_MEM_BUS_ID_WIDTH - 1:0] m_axi_mem_bus_ARID;
output  [7:0] m_axi_mem_bus_ARLEN;
output  [2:0] m_axi_mem_bus_ARSIZE;
output  [1:0] m_axi_mem_bus_ARBURST;
output  [1:0] m_axi_mem_bus_ARLOCK;
output  [3:0] m_axi_mem_bus_ARCACHE;
output  [2:0] m_axi_mem_bus_ARPROT;
output  [3:0] m_axi_mem_bus_ARQOS;
output  [3:0] m_axi_mem_bus_ARREGION;
output  [C_M_AXI_MEM_BUS_ARUSER_WIDTH - 1:0] m_axi_mem_bus_ARUSER;
input   m_axi_mem_bus_RVALID;
output   m_axi_mem_bus_RREADY;
input  [C_M_AXI_MEM_BUS_DATA_WIDTH - 1:0] m_axi_mem_bus_RDATA;
input   m_axi_mem_bus_RLAST;
input  [C_M_AXI_MEM_BUS_ID_WIDTH - 1:0] m_axi_mem_bus_RID;
input  [C_M_AXI_MEM_BUS_RUSER_WIDTH - 1:0] m_axi_mem_bus_RUSER;
input  [1:0] m_axi_mem_bus_RRESP;
input   m_axi_mem_bus_BVALID;
output   m_axi_mem_bus_BREADY;
input  [1:0] m_axi_mem_bus_BRESP;
input  [C_M_AXI_MEM_BUS_ID_WIDTH - 1:0] m_axi_mem_bus_BID;
input  [C_M_AXI_MEM_BUS_BUSER_WIDTH - 1:0] m_axi_mem_bus_BUSER;

 reg    ap_rst_n_inv;
wire    ap_start;
wire    ap_ready;
wire    ap_done;
wire    ap_idle;
wire   [31:0] args_q0;
wire   [31:0] mem_in_V;
wire   [31:0] mem_out_V;
wire    mem_bus_AWREADY;
wire    mem_bus_WREADY;
wire    mem_bus_ARREADY;
wire    mem_bus_RVALID;
wire   [63:0] mem_bus_RDATA;
wire    mem_bus_RLAST;
wire   [0:0] mem_bus_RID;
wire   [0:0] mem_bus_RUSER;
wire   [1:0] mem_bus_RRESP;
wire    mem_bus_BVALID;
wire   [1:0] mem_bus_BRESP;
wire   [0:0] mem_bus_BID;
wire   [0:0] mem_bus_BUSER;
wire    Block_proc4_U0_ap_start;
wire    Block_proc4_U0_ap_done;
wire    Block_proc4_U0_ap_continue;
wire    Block_proc4_U0_ap_idle;
wire    Block_proc4_U0_ap_ready;
wire   [2:0] Block_proc4_U0_args_address0;
wire    Block_proc4_U0_args_ce0;
wire   [31:0] Block_proc4_U0_mem_in_V_out_din;
wire    Block_proc4_U0_mem_in_V_out_write;
wire   [31:0] Block_proc4_U0_mem_out_V_out_din;
wire    Block_proc4_U0_mem_out_V_out_write;
wire   [31:0] Block_proc4_U0_ap_return_0;
wire   [31:0] Block_proc4_U0_ap_return_1;
wire   [31:0] Block_proc4_U0_ap_return_2;
wire    ap_channel_done_args_load_2_loc_chan;
wire    args_load_2_loc_chan_full_n;
reg    ap_sync_reg_channel_write_args_load_2_loc_chan;
wire    ap_sync_channel_write_args_load_2_loc_chan;
wire    ap_channel_done_args_load_1_loc_chan;
wire    args_load_1_loc_chan_full_n;
reg    ap_sync_reg_channel_write_args_load_1_loc_chan;
wire    ap_sync_channel_write_args_load_1_loc_chan;
wire    ap_channel_done_args_load_loc_channe;
wire    args_load_loc_channe_full_n;
reg    ap_sync_reg_channel_write_args_load_loc_channe;
wire    ap_sync_channel_write_args_load_loc_channe;
wire    acc_mod_U0_ap_start;
wire    acc_mod_U0_ap_done;
wire    acc_mod_U0_ap_continue;
wire    acc_mod_U0_ap_idle;
wire    acc_mod_U0_ap_ready;
wire   [31:0] acc_mod_U0_id;
wire    acc_mod_U0_id_ap_vld;
wire    acc_mod_U0_m_axi_mem_port_in_V_AWVALID;
wire   [31:0] acc_mod_U0_m_axi_mem_port_in_V_AWADDR;
wire   [0:0] acc_mod_U0_m_axi_mem_port_in_V_AWID;
wire   [31:0] acc_mod_U0_m_axi_mem_port_in_V_AWLEN;
wire   [2:0] acc_mod_U0_m_axi_mem_port_in_V_AWSIZE;
wire   [1:0] acc_mod_U0_m_axi_mem_port_in_V_AWBURST;
wire   [1:0] acc_mod_U0_m_axi_mem_port_in_V_AWLOCK;
wire   [3:0] acc_mod_U0_m_axi_mem_port_in_V_AWCACHE;
wire   [2:0] acc_mod_U0_m_axi_mem_port_in_V_AWPROT;
wire   [3:0] acc_mod_U0_m_axi_mem_port_in_V_AWQOS;
wire   [3:0] acc_mod_U0_m_axi_mem_port_in_V_AWREGION;
wire   [0:0] acc_mod_U0_m_axi_mem_port_in_V_AWUSER;
wire    acc_mod_U0_m_axi_mem_port_in_V_WVALID;
wire   [63:0] acc_mod_U0_m_axi_mem_port_in_V_WDATA;
wire   [7:0] acc_mod_U0_m_axi_mem_port_in_V_WSTRB;
wire    acc_mod_U0_m_axi_mem_port_in_V_WLAST;
wire   [0:0] acc_mod_U0_m_axi_mem_port_in_V_WID;
wire   [0:0] acc_mod_U0_m_axi_mem_port_in_V_WUSER;
wire    acc_mod_U0_m_axi_mem_port_in_V_ARVALID;
wire   [31:0] acc_mod_U0_m_axi_mem_port_in_V_ARADDR;
wire   [0:0] acc_mod_U0_m_axi_mem_port_in_V_ARID;
wire   [31:0] acc_mod_U0_m_axi_mem_port_in_V_ARLEN;
wire   [2:0] acc_mod_U0_m_axi_mem_port_in_V_ARSIZE;
wire   [1:0] acc_mod_U0_m_axi_mem_port_in_V_ARBURST;
wire   [1:0] acc_mod_U0_m_axi_mem_port_in_V_ARLOCK;
wire   [3:0] acc_mod_U0_m_axi_mem_port_in_V_ARCACHE;
wire   [2:0] acc_mod_U0_m_axi_mem_port_in_V_ARPROT;
wire   [3:0] acc_mod_U0_m_axi_mem_port_in_V_ARQOS;
wire   [3:0] acc_mod_U0_m_axi_mem_port_in_V_ARREGION;
wire   [0:0] acc_mod_U0_m_axi_mem_port_in_V_ARUSER;
wire    acc_mod_U0_m_axi_mem_port_in_V_RREADY;
wire    acc_mod_U0_m_axi_mem_port_in_V_BREADY;
wire    acc_mod_U0_mem_port_in_V_offset_read;
wire    acc_mod_U0_mem_port_out_V_offset_read;
wire    ap_sync_continue;
wire    mem_in_V_c_full_n;
wire   [31:0] mem_in_V_c_dout;
wire    mem_in_V_c_empty_n;
wire    mem_out_V_c_full_n;
wire   [31:0] mem_out_V_c_dout;
wire    mem_out_V_c_empty_n;
wire   [31:0] args_load_loc_channe_dout;
wire    args_load_loc_channe_empty_n;
wire   [31:0] args_load_1_loc_chan_dout;
wire    args_load_1_loc_chan_empty_n;
wire   [31:0] args_load_2_loc_chan_dout;
wire    args_load_2_loc_chan_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
reg    ap_sync_reg_Block_proc4_U0_ap_ready;
wire    ap_sync_Block_proc4_U0_ap_ready;
reg   [1:0] Block_proc4_U0_ap_ready_count;
reg    ap_sync_reg_acc_mod_U0_ap_ready;
wire    ap_sync_acc_mod_U0_ap_ready;
reg   [1:0] acc_mod_U0_ap_ready_count;
wire    Block_proc4_U0_start_full_n;
wire    Block_proc4_U0_start_write;
wire    acc_mod_U0_start_full_n;
wire    acc_mod_U0_start_write;

// power-on initialization
initial begin
#0 ap_sync_reg_channel_write_args_load_2_loc_chan = 1'b0;
#0 ap_sync_reg_channel_write_args_load_1_loc_chan = 1'b0;
#0 ap_sync_reg_channel_write_args_load_loc_channe = 1'b0;
#0 ap_sync_reg_Block_proc4_U0_ap_ready = 1'b0;
#0 Block_proc4_U0_ap_ready_count = 2'd0;
#0 ap_sync_reg_acc_mod_U0_ap_ready = 1'b0;
#0 acc_mod_U0_ap_ready_count = 2'd0;
end

acc_ctrl_bus_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
acc_ctrl_bus_s_axi_U(
    .AWVALID(s_axi_ctrl_bus_AWVALID),
    .AWREADY(s_axi_ctrl_bus_AWREADY),
    .AWADDR(s_axi_ctrl_bus_AWADDR),
    .WVALID(s_axi_ctrl_bus_WVALID),
    .WREADY(s_axi_ctrl_bus_WREADY),
    .WDATA(s_axi_ctrl_bus_WDATA),
    .WSTRB(s_axi_ctrl_bus_WSTRB),
    .ARVALID(s_axi_ctrl_bus_ARVALID),
    .ARREADY(s_axi_ctrl_bus_ARREADY),
    .ARADDR(s_axi_ctrl_bus_ARADDR),
    .RVALID(s_axi_ctrl_bus_RVALID),
    .RREADY(s_axi_ctrl_bus_RREADY),
    .RDATA(s_axi_ctrl_bus_RDATA),
    .RRESP(s_axi_ctrl_bus_RRESP),
    .BVALID(s_axi_ctrl_bus_BVALID),
    .BREADY(s_axi_ctrl_bus_BREADY),
    .BRESP(s_axi_ctrl_bus_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .id(acc_mod_U0_id),
    .id_ap_vld(acc_mod_U0_id_ap_vld),
    .args_address0(Block_proc4_U0_args_address0),
    .args_ce0(Block_proc4_U0_args_ce0),
    .args_q0(args_q0),
    .mem_in_V(mem_in_V),
    .mem_out_V(mem_out_V)
);

acc_mem_bus_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 64 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_MEM_BUS_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_MEM_BUS_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_MEM_BUS_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_MEM_BUS_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_MEM_BUS_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_MEM_BUS_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_MEM_BUS_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_MEM_BUS_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_MEM_BUS_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_MEM_BUS_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_MEM_BUS_CACHE_VALUE ))
acc_mem_bus_m_axi_U(
    .AWVALID(m_axi_mem_bus_AWVALID),
    .AWREADY(m_axi_mem_bus_AWREADY),
    .AWADDR(m_axi_mem_bus_AWADDR),
    .AWID(m_axi_mem_bus_AWID),
    .AWLEN(m_axi_mem_bus_AWLEN),
    .AWSIZE(m_axi_mem_bus_AWSIZE),
    .AWBURST(m_axi_mem_bus_AWBURST),
    .AWLOCK(m_axi_mem_bus_AWLOCK),
    .AWCACHE(m_axi_mem_bus_AWCACHE),
    .AWPROT(m_axi_mem_bus_AWPROT),
    .AWQOS(m_axi_mem_bus_AWQOS),
    .AWREGION(m_axi_mem_bus_AWREGION),
    .AWUSER(m_axi_mem_bus_AWUSER),
    .WVALID(m_axi_mem_bus_WVALID),
    .WREADY(m_axi_mem_bus_WREADY),
    .WDATA(m_axi_mem_bus_WDATA),
    .WSTRB(m_axi_mem_bus_WSTRB),
    .WLAST(m_axi_mem_bus_WLAST),
    .WID(m_axi_mem_bus_WID),
    .WUSER(m_axi_mem_bus_WUSER),
    .ARVALID(m_axi_mem_bus_ARVALID),
    .ARREADY(m_axi_mem_bus_ARREADY),
    .ARADDR(m_axi_mem_bus_ARADDR),
    .ARID(m_axi_mem_bus_ARID),
    .ARLEN(m_axi_mem_bus_ARLEN),
    .ARSIZE(m_axi_mem_bus_ARSIZE),
    .ARBURST(m_axi_mem_bus_ARBURST),
    .ARLOCK(m_axi_mem_bus_ARLOCK),
    .ARCACHE(m_axi_mem_bus_ARCACHE),
    .ARPROT(m_axi_mem_bus_ARPROT),
    .ARQOS(m_axi_mem_bus_ARQOS),
    .ARREGION(m_axi_mem_bus_ARREGION),
    .ARUSER(m_axi_mem_bus_ARUSER),
    .RVALID(m_axi_mem_bus_RVALID),
    .RREADY(m_axi_mem_bus_RREADY),
    .RDATA(m_axi_mem_bus_RDATA),
    .RLAST(m_axi_mem_bus_RLAST),
    .RID(m_axi_mem_bus_RID),
    .RUSER(m_axi_mem_bus_RUSER),
    .RRESP(m_axi_mem_bus_RRESP),
    .BVALID(m_axi_mem_bus_BVALID),
    .BREADY(m_axi_mem_bus_BREADY),
    .BRESP(m_axi_mem_bus_BRESP),
    .BID(m_axi_mem_bus_BID),
    .BUSER(m_axi_mem_bus_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(acc_mod_U0_m_axi_mem_port_in_V_ARVALID),
    .I_ARREADY(mem_bus_ARREADY),
    .I_ARADDR(acc_mod_U0_m_axi_mem_port_in_V_ARADDR),
    .I_ARID(acc_mod_U0_m_axi_mem_port_in_V_ARID),
    .I_ARLEN(acc_mod_U0_m_axi_mem_port_in_V_ARLEN),
    .I_ARSIZE(acc_mod_U0_m_axi_mem_port_in_V_ARSIZE),
    .I_ARLOCK(acc_mod_U0_m_axi_mem_port_in_V_ARLOCK),
    .I_ARCACHE(acc_mod_U0_m_axi_mem_port_in_V_ARCACHE),
    .I_ARQOS(acc_mod_U0_m_axi_mem_port_in_V_ARQOS),
    .I_ARPROT(acc_mod_U0_m_axi_mem_port_in_V_ARPROT),
    .I_ARUSER(acc_mod_U0_m_axi_mem_port_in_V_ARUSER),
    .I_ARBURST(acc_mod_U0_m_axi_mem_port_in_V_ARBURST),
    .I_ARREGION(acc_mod_U0_m_axi_mem_port_in_V_ARREGION),
    .I_RVALID(mem_bus_RVALID),
    .I_RREADY(acc_mod_U0_m_axi_mem_port_in_V_RREADY),
    .I_RDATA(mem_bus_RDATA),
    .I_RID(mem_bus_RID),
    .I_RUSER(mem_bus_RUSER),
    .I_RRESP(mem_bus_RRESP),
    .I_RLAST(mem_bus_RLAST),
    .I_AWVALID(acc_mod_U0_m_axi_mem_port_in_V_AWVALID),
    .I_AWREADY(mem_bus_AWREADY),
    .I_AWADDR(acc_mod_U0_m_axi_mem_port_in_V_AWADDR),
    .I_AWID(acc_mod_U0_m_axi_mem_port_in_V_AWID),
    .I_AWLEN(acc_mod_U0_m_axi_mem_port_in_V_AWLEN),
    .I_AWSIZE(acc_mod_U0_m_axi_mem_port_in_V_AWSIZE),
    .I_AWLOCK(acc_mod_U0_m_axi_mem_port_in_V_AWLOCK),
    .I_AWCACHE(acc_mod_U0_m_axi_mem_port_in_V_AWCACHE),
    .I_AWQOS(acc_mod_U0_m_axi_mem_port_in_V_AWQOS),
    .I_AWPROT(acc_mod_U0_m_axi_mem_port_in_V_AWPROT),
    .I_AWUSER(acc_mod_U0_m_axi_mem_port_in_V_AWUSER),
    .I_AWBURST(acc_mod_U0_m_axi_mem_port_in_V_AWBURST),
    .I_AWREGION(acc_mod_U0_m_axi_mem_port_in_V_AWREGION),
    .I_WVALID(acc_mod_U0_m_axi_mem_port_in_V_WVALID),
    .I_WREADY(mem_bus_WREADY),
    .I_WDATA(acc_mod_U0_m_axi_mem_port_in_V_WDATA),
    .I_WID(acc_mod_U0_m_axi_mem_port_in_V_WID),
    .I_WUSER(acc_mod_U0_m_axi_mem_port_in_V_WUSER),
    .I_WLAST(acc_mod_U0_m_axi_mem_port_in_V_WLAST),
    .I_WSTRB(acc_mod_U0_m_axi_mem_port_in_V_WSTRB),
    .I_BVALID(mem_bus_BVALID),
    .I_BREADY(acc_mod_U0_m_axi_mem_port_in_V_BREADY),
    .I_BRESP(mem_bus_BRESP),
    .I_BID(mem_bus_BID),
    .I_BUSER(mem_bus_BUSER)
);

Block_proc4 Block_proc4_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(Block_proc4_U0_ap_start),
    .ap_done(Block_proc4_U0_ap_done),
    .ap_continue(Block_proc4_U0_ap_continue),
    .ap_idle(Block_proc4_U0_ap_idle),
    .ap_ready(Block_proc4_U0_ap_ready),
    .args_address0(Block_proc4_U0_args_address0),
    .args_ce0(Block_proc4_U0_args_ce0),
    .args_q0(args_q0),
    .mem_in_V(mem_in_V),
    .mem_out_V(mem_out_V),
    .mem_in_V_out_din(Block_proc4_U0_mem_in_V_out_din),
    .mem_in_V_out_full_n(mem_in_V_c_full_n),
    .mem_in_V_out_write(Block_proc4_U0_mem_in_V_out_write),
    .mem_out_V_out_din(Block_proc4_U0_mem_out_V_out_din),
    .mem_out_V_out_full_n(mem_out_V_c_full_n),
    .mem_out_V_out_write(Block_proc4_U0_mem_out_V_out_write),
    .ap_return_0(Block_proc4_U0_ap_return_0),
    .ap_return_1(Block_proc4_U0_ap_return_1),
    .ap_return_2(Block_proc4_U0_ap_return_2)
);

acc_mod acc_mod_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(acc_mod_U0_ap_start),
    .ap_done(acc_mod_U0_ap_done),
    .ap_continue(acc_mod_U0_ap_continue),
    .ap_idle(acc_mod_U0_ap_idle),
    .ap_ready(acc_mod_U0_ap_ready),
    .id(acc_mod_U0_id),
    .id_ap_vld(acc_mod_U0_id_ap_vld),
    .m_axi_mem_port_in_V_AWVALID(acc_mod_U0_m_axi_mem_port_in_V_AWVALID),
    .m_axi_mem_port_in_V_AWREADY(mem_bus_AWREADY),
    .m_axi_mem_port_in_V_AWADDR(acc_mod_U0_m_axi_mem_port_in_V_AWADDR),
    .m_axi_mem_port_in_V_AWID(acc_mod_U0_m_axi_mem_port_in_V_AWID),
    .m_axi_mem_port_in_V_AWLEN(acc_mod_U0_m_axi_mem_port_in_V_AWLEN),
    .m_axi_mem_port_in_V_AWSIZE(acc_mod_U0_m_axi_mem_port_in_V_AWSIZE),
    .m_axi_mem_port_in_V_AWBURST(acc_mod_U0_m_axi_mem_port_in_V_AWBURST),
    .m_axi_mem_port_in_V_AWLOCK(acc_mod_U0_m_axi_mem_port_in_V_AWLOCK),
    .m_axi_mem_port_in_V_AWCACHE(acc_mod_U0_m_axi_mem_port_in_V_AWCACHE),
    .m_axi_mem_port_in_V_AWPROT(acc_mod_U0_m_axi_mem_port_in_V_AWPROT),
    .m_axi_mem_port_in_V_AWQOS(acc_mod_U0_m_axi_mem_port_in_V_AWQOS),
    .m_axi_mem_port_in_V_AWREGION(acc_mod_U0_m_axi_mem_port_in_V_AWREGION),
    .m_axi_mem_port_in_V_AWUSER(acc_mod_U0_m_axi_mem_port_in_V_AWUSER),
    .m_axi_mem_port_in_V_WVALID(acc_mod_U0_m_axi_mem_port_in_V_WVALID),
    .m_axi_mem_port_in_V_WREADY(mem_bus_WREADY),
    .m_axi_mem_port_in_V_WDATA(acc_mod_U0_m_axi_mem_port_in_V_WDATA),
    .m_axi_mem_port_in_V_WSTRB(acc_mod_U0_m_axi_mem_port_in_V_WSTRB),
    .m_axi_mem_port_in_V_WLAST(acc_mod_U0_m_axi_mem_port_in_V_WLAST),
    .m_axi_mem_port_in_V_WID(acc_mod_U0_m_axi_mem_port_in_V_WID),
    .m_axi_mem_port_in_V_WUSER(acc_mod_U0_m_axi_mem_port_in_V_WUSER),
    .m_axi_mem_port_in_V_ARVALID(acc_mod_U0_m_axi_mem_port_in_V_ARVALID),
    .m_axi_mem_port_in_V_ARREADY(mem_bus_ARREADY),
    .m_axi_mem_port_in_V_ARADDR(acc_mod_U0_m_axi_mem_port_in_V_ARADDR),
    .m_axi_mem_port_in_V_ARID(acc_mod_U0_m_axi_mem_port_in_V_ARID),
    .m_axi_mem_port_in_V_ARLEN(acc_mod_U0_m_axi_mem_port_in_V_ARLEN),
    .m_axi_mem_port_in_V_ARSIZE(acc_mod_U0_m_axi_mem_port_in_V_ARSIZE),
    .m_axi_mem_port_in_V_ARBURST(acc_mod_U0_m_axi_mem_port_in_V_ARBURST),
    .m_axi_mem_port_in_V_ARLOCK(acc_mod_U0_m_axi_mem_port_in_V_ARLOCK),
    .m_axi_mem_port_in_V_ARCACHE(acc_mod_U0_m_axi_mem_port_in_V_ARCACHE),
    .m_axi_mem_port_in_V_ARPROT(acc_mod_U0_m_axi_mem_port_in_V_ARPROT),
    .m_axi_mem_port_in_V_ARQOS(acc_mod_U0_m_axi_mem_port_in_V_ARQOS),
    .m_axi_mem_port_in_V_ARREGION(acc_mod_U0_m_axi_mem_port_in_V_ARREGION),
    .m_axi_mem_port_in_V_ARUSER(acc_mod_U0_m_axi_mem_port_in_V_ARUSER),
    .m_axi_mem_port_in_V_RVALID(mem_bus_RVALID),
    .m_axi_mem_port_in_V_RREADY(acc_mod_U0_m_axi_mem_port_in_V_RREADY),
    .m_axi_mem_port_in_V_RDATA(mem_bus_RDATA),
    .m_axi_mem_port_in_V_RLAST(mem_bus_RLAST),
    .m_axi_mem_port_in_V_RID(mem_bus_RID),
    .m_axi_mem_port_in_V_RUSER(mem_bus_RUSER),
    .m_axi_mem_port_in_V_RRESP(mem_bus_RRESP),
    .m_axi_mem_port_in_V_BVALID(mem_bus_BVALID),
    .m_axi_mem_port_in_V_BREADY(acc_mod_U0_m_axi_mem_port_in_V_BREADY),
    .m_axi_mem_port_in_V_BRESP(mem_bus_BRESP),
    .m_axi_mem_port_in_V_BID(mem_bus_BID),
    .m_axi_mem_port_in_V_BUSER(mem_bus_BUSER),
    .mem_port_in_V_offset_dout(mem_in_V_c_dout),
    .mem_port_in_V_offset_empty_n(mem_in_V_c_empty_n),
    .mem_port_in_V_offset_read(acc_mod_U0_mem_port_in_V_offset_read),
    .mem_port_out_V_offset_dout(mem_out_V_c_dout),
    .mem_port_out_V_offset_empty_n(mem_out_V_c_empty_n),
    .mem_port_out_V_offset_read(acc_mod_U0_mem_port_out_V_offset_read),
    .args0(args_load_loc_channe_dout),
    .args1(args_load_1_loc_chan_dout),
    .args2(args_load_2_loc_chan_dout)
);

fifo_w32_d2_A mem_in_V_c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_proc4_U0_mem_in_V_out_din),
    .if_full_n(mem_in_V_c_full_n),
    .if_write(Block_proc4_U0_mem_in_V_out_write),
    .if_dout(mem_in_V_c_dout),
    .if_empty_n(mem_in_V_c_empty_n),
    .if_read(acc_mod_U0_mem_port_in_V_offset_read)
);

fifo_w32_d2_A mem_out_V_c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_proc4_U0_mem_out_V_out_din),
    .if_full_n(mem_out_V_c_full_n),
    .if_write(Block_proc4_U0_mem_out_V_out_write),
    .if_dout(mem_out_V_c_dout),
    .if_empty_n(mem_out_V_c_empty_n),
    .if_read(acc_mod_U0_mem_port_out_V_offset_read)
);

fifo_w32_d2_A args_load_loc_channe_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_proc4_U0_ap_return_0),
    .if_full_n(args_load_loc_channe_full_n),
    .if_write(ap_channel_done_args_load_loc_channe),
    .if_dout(args_load_loc_channe_dout),
    .if_empty_n(args_load_loc_channe_empty_n),
    .if_read(acc_mod_U0_ap_ready)
);

fifo_w32_d2_A args_load_1_loc_chan_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_proc4_U0_ap_return_1),
    .if_full_n(args_load_1_loc_chan_full_n),
    .if_write(ap_channel_done_args_load_1_loc_chan),
    .if_dout(args_load_1_loc_chan_dout),
    .if_empty_n(args_load_1_loc_chan_empty_n),
    .if_read(acc_mod_U0_ap_ready)
);

fifo_w32_d2_A args_load_2_loc_chan_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_proc4_U0_ap_return_2),
    .if_full_n(args_load_2_loc_chan_full_n),
    .if_write(ap_channel_done_args_load_2_loc_chan),
    .if_dout(args_load_2_loc_chan_dout),
    .if_empty_n(args_load_2_loc_chan_empty_n),
    .if_read(acc_mod_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_Block_proc4_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_Block_proc4_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_Block_proc4_U0_ap_ready <= ap_sync_Block_proc4_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_acc_mod_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_acc_mod_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_acc_mod_U0_ap_ready <= ap_sync_acc_mod_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_args_load_1_loc_chan <= 1'b0;
    end else begin
        if (((Block_proc4_U0_ap_done & Block_proc4_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_args_load_1_loc_chan <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_args_load_1_loc_chan <= ap_sync_channel_write_args_load_1_loc_chan;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_args_load_2_loc_chan <= 1'b0;
    end else begin
        if (((Block_proc4_U0_ap_done & Block_proc4_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_args_load_2_loc_chan <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_args_load_2_loc_chan <= ap_sync_channel_write_args_load_2_loc_chan;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_args_load_loc_channe <= 1'b0;
    end else begin
        if (((Block_proc4_U0_ap_done & Block_proc4_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_args_load_loc_channe <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_args_load_loc_channe <= ap_sync_channel_write_args_load_loc_channe;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sync_ready == 1'b1) & (1'b0 == Block_proc4_U0_ap_ready))) begin
        Block_proc4_U0_ap_ready_count <= (Block_proc4_U0_ap_ready_count - 2'd1);
    end else if (((1'b1 == Block_proc4_U0_ap_ready) & (ap_sync_ready == 1'b0))) begin
        Block_proc4_U0_ap_ready_count <= (Block_proc4_U0_ap_ready_count + 2'd1);
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sync_ready == 1'b1) & (1'b0 == acc_mod_U0_ap_ready))) begin
        acc_mod_U0_ap_ready_count <= (acc_mod_U0_ap_ready_count - 2'd1);
    end else if (((1'b1 == acc_mod_U0_ap_ready) & (ap_sync_ready == 1'b0))) begin
        acc_mod_U0_ap_ready_count <= (acc_mod_U0_ap_ready_count + 2'd1);
    end
end

assign Block_proc4_U0_ap_continue = (ap_sync_channel_write_args_load_loc_channe & ap_sync_channel_write_args_load_2_loc_chan & ap_sync_channel_write_args_load_1_loc_chan);

assign Block_proc4_U0_ap_start = ((ap_sync_reg_Block_proc4_U0_ap_ready ^ 1'b1) & ap_start);

assign Block_proc4_U0_start_full_n = 1'b1;

assign Block_proc4_U0_start_write = 1'b0;

assign acc_mod_U0_ap_continue = 1'b1;

assign acc_mod_U0_ap_start = ((ap_sync_reg_acc_mod_U0_ap_ready ^ 1'b1) & args_load_loc_channe_empty_n & args_load_2_loc_chan_empty_n & args_load_1_loc_chan_empty_n & ap_start);

assign acc_mod_U0_start_full_n = 1'b1;

assign acc_mod_U0_start_write = 1'b0;

assign ap_channel_done_args_load_1_loc_chan = ((ap_sync_reg_channel_write_args_load_1_loc_chan ^ 1'b1) & Block_proc4_U0_ap_done);

assign ap_channel_done_args_load_2_loc_chan = ((ap_sync_reg_channel_write_args_load_2_loc_chan ^ 1'b1) & Block_proc4_U0_ap_done);

assign ap_channel_done_args_load_loc_channe = ((ap_sync_reg_channel_write_args_load_loc_channe ^ 1'b1) & Block_proc4_U0_ap_done);

assign ap_done = acc_mod_U0_ap_done;

assign ap_idle = ((args_load_2_loc_chan_empty_n ^ 1'b1) & (args_load_1_loc_chan_empty_n ^ 1'b1) & (args_load_loc_channe_empty_n ^ 1'b1) & acc_mod_U0_ap_idle & Block_proc4_U0_ap_idle);

assign ap_ready = ap_sync_ready;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_Block_proc4_U0_ap_ready = (ap_sync_reg_Block_proc4_U0_ap_ready | Block_proc4_U0_ap_ready);

assign ap_sync_acc_mod_U0_ap_ready = (ap_sync_reg_acc_mod_U0_ap_ready | acc_mod_U0_ap_ready);

assign ap_sync_channel_write_args_load_1_loc_chan = ((args_load_1_loc_chan_full_n & ap_channel_done_args_load_1_loc_chan) | ap_sync_reg_channel_write_args_load_1_loc_chan);

assign ap_sync_channel_write_args_load_2_loc_chan = ((args_load_2_loc_chan_full_n & ap_channel_done_args_load_2_loc_chan) | ap_sync_reg_channel_write_args_load_2_loc_chan);

assign ap_sync_channel_write_args_load_loc_channe = ((args_load_loc_channe_full_n & ap_channel_done_args_load_loc_channe) | ap_sync_reg_channel_write_args_load_loc_channe);

assign ap_sync_continue = 1'b1;

assign ap_sync_done = acc_mod_U0_ap_done;

assign ap_sync_ready = (ap_sync_acc_mod_U0_ap_ready & ap_sync_Block_proc4_U0_ap_ready);

endmodule //acc
