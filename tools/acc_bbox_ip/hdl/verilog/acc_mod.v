// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module acc_mod (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        id,
        id_ap_vld,
        m_axi_mem_port_in_V_AWVALID,
        m_axi_mem_port_in_V_AWREADY,
        m_axi_mem_port_in_V_AWADDR,
        m_axi_mem_port_in_V_AWID,
        m_axi_mem_port_in_V_AWLEN,
        m_axi_mem_port_in_V_AWSIZE,
        m_axi_mem_port_in_V_AWBURST,
        m_axi_mem_port_in_V_AWLOCK,
        m_axi_mem_port_in_V_AWCACHE,
        m_axi_mem_port_in_V_AWPROT,
        m_axi_mem_port_in_V_AWQOS,
        m_axi_mem_port_in_V_AWREGION,
        m_axi_mem_port_in_V_AWUSER,
        m_axi_mem_port_in_V_WVALID,
        m_axi_mem_port_in_V_WREADY,
        m_axi_mem_port_in_V_WDATA,
        m_axi_mem_port_in_V_WSTRB,
        m_axi_mem_port_in_V_WLAST,
        m_axi_mem_port_in_V_WID,
        m_axi_mem_port_in_V_WUSER,
        m_axi_mem_port_in_V_ARVALID,
        m_axi_mem_port_in_V_ARREADY,
        m_axi_mem_port_in_V_ARADDR,
        m_axi_mem_port_in_V_ARID,
        m_axi_mem_port_in_V_ARLEN,
        m_axi_mem_port_in_V_ARSIZE,
        m_axi_mem_port_in_V_ARBURST,
        m_axi_mem_port_in_V_ARLOCK,
        m_axi_mem_port_in_V_ARCACHE,
        m_axi_mem_port_in_V_ARPROT,
        m_axi_mem_port_in_V_ARQOS,
        m_axi_mem_port_in_V_ARREGION,
        m_axi_mem_port_in_V_ARUSER,
        m_axi_mem_port_in_V_RVALID,
        m_axi_mem_port_in_V_RREADY,
        m_axi_mem_port_in_V_RDATA,
        m_axi_mem_port_in_V_RLAST,
        m_axi_mem_port_in_V_RID,
        m_axi_mem_port_in_V_RUSER,
        m_axi_mem_port_in_V_RRESP,
        m_axi_mem_port_in_V_BVALID,
        m_axi_mem_port_in_V_BREADY,
        m_axi_mem_port_in_V_BRESP,
        m_axi_mem_port_in_V_BID,
        m_axi_mem_port_in_V_BUSER,
        mem_port_in_V_offset_dout,
        mem_port_in_V_offset_empty_n,
        mem_port_in_V_offset_read,
        mem_port_out_V_offset_dout,
        mem_port_out_V_offset_empty_n,
        mem_port_out_V_offset_read,
        args0,
        args1,
        args2
);

parameter    ap_ST_fsm_state1 = 28'd1;
parameter    ap_ST_fsm_state2 = 28'd2;
parameter    ap_ST_fsm_state3 = 28'd4;
parameter    ap_ST_fsm_state4 = 28'd8;
parameter    ap_ST_fsm_state5 = 28'd16;
parameter    ap_ST_fsm_state6 = 28'd32;
parameter    ap_ST_fsm_state7 = 28'd64;
parameter    ap_ST_fsm_state8 = 28'd128;
parameter    ap_ST_fsm_pp0_stage0 = 28'd256;
parameter    ap_ST_fsm_state12 = 28'd512;
parameter    ap_ST_fsm_state13 = 28'd1024;
parameter    ap_ST_fsm_state14 = 28'd2048;
parameter    ap_ST_fsm_state15 = 28'd4096;
parameter    ap_ST_fsm_state16 = 28'd8192;
parameter    ap_ST_fsm_state17 = 28'd16384;
parameter    ap_ST_fsm_state18 = 28'd32768;
parameter    ap_ST_fsm_state19 = 28'd65536;
parameter    ap_ST_fsm_pp1_stage0 = 28'd131072;
parameter    ap_ST_fsm_state23 = 28'd262144;
parameter    ap_ST_fsm_pp2_stage0 = 28'd524288;
parameter    ap_ST_fsm_state33 = 28'd1048576;
parameter    ap_ST_fsm_state34 = 28'd2097152;
parameter    ap_ST_fsm_pp3_stage0 = 28'd4194304;
parameter    ap_ST_fsm_state38 = 28'd8388608;
parameter    ap_ST_fsm_state39 = 28'd16777216;
parameter    ap_ST_fsm_state40 = 28'd33554432;
parameter    ap_ST_fsm_state41 = 28'd67108864;
parameter    ap_ST_fsm_state42 = 28'd134217728;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [31:0] id;
output   id_ap_vld;
output   m_axi_mem_port_in_V_AWVALID;
input   m_axi_mem_port_in_V_AWREADY;
output  [31:0] m_axi_mem_port_in_V_AWADDR;
output  [0:0] m_axi_mem_port_in_V_AWID;
output  [31:0] m_axi_mem_port_in_V_AWLEN;
output  [2:0] m_axi_mem_port_in_V_AWSIZE;
output  [1:0] m_axi_mem_port_in_V_AWBURST;
output  [1:0] m_axi_mem_port_in_V_AWLOCK;
output  [3:0] m_axi_mem_port_in_V_AWCACHE;
output  [2:0] m_axi_mem_port_in_V_AWPROT;
output  [3:0] m_axi_mem_port_in_V_AWQOS;
output  [3:0] m_axi_mem_port_in_V_AWREGION;
output  [0:0] m_axi_mem_port_in_V_AWUSER;
output   m_axi_mem_port_in_V_WVALID;
input   m_axi_mem_port_in_V_WREADY;
output  [63:0] m_axi_mem_port_in_V_WDATA;
output  [7:0] m_axi_mem_port_in_V_WSTRB;
output   m_axi_mem_port_in_V_WLAST;
output  [0:0] m_axi_mem_port_in_V_WID;
output  [0:0] m_axi_mem_port_in_V_WUSER;
output   m_axi_mem_port_in_V_ARVALID;
input   m_axi_mem_port_in_V_ARREADY;
output  [31:0] m_axi_mem_port_in_V_ARADDR;
output  [0:0] m_axi_mem_port_in_V_ARID;
output  [31:0] m_axi_mem_port_in_V_ARLEN;
output  [2:0] m_axi_mem_port_in_V_ARSIZE;
output  [1:0] m_axi_mem_port_in_V_ARBURST;
output  [1:0] m_axi_mem_port_in_V_ARLOCK;
output  [3:0] m_axi_mem_port_in_V_ARCACHE;
output  [2:0] m_axi_mem_port_in_V_ARPROT;
output  [3:0] m_axi_mem_port_in_V_ARQOS;
output  [3:0] m_axi_mem_port_in_V_ARREGION;
output  [0:0] m_axi_mem_port_in_V_ARUSER;
input   m_axi_mem_port_in_V_RVALID;
output   m_axi_mem_port_in_V_RREADY;
input  [63:0] m_axi_mem_port_in_V_RDATA;
input   m_axi_mem_port_in_V_RLAST;
input  [0:0] m_axi_mem_port_in_V_RID;
input  [0:0] m_axi_mem_port_in_V_RUSER;
input  [1:0] m_axi_mem_port_in_V_RRESP;
input   m_axi_mem_port_in_V_BVALID;
output   m_axi_mem_port_in_V_BREADY;
input  [1:0] m_axi_mem_port_in_V_BRESP;
input  [0:0] m_axi_mem_port_in_V_BID;
input  [0:0] m_axi_mem_port_in_V_BUSER;
input  [31:0] mem_port_in_V_offset_dout;
input   mem_port_in_V_offset_empty_n;
output   mem_port_in_V_offset_read;
input  [31:0] mem_port_out_V_offset_dout;
input   mem_port_out_V_offset_empty_n;
output   mem_port_out_V_offset_read;
input  [31:0] args0;
input  [31:0] args1;
input  [31:0] args2;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg id_ap_vld;
reg m_axi_mem_port_in_V_AWVALID;
reg m_axi_mem_port_in_V_WVALID;
reg m_axi_mem_port_in_V_ARVALID;
reg[31:0] m_axi_mem_port_in_V_ARADDR;
reg m_axi_mem_port_in_V_RREADY;
reg m_axi_mem_port_in_V_BREADY;
reg mem_port_in_V_offset_read;
reg mem_port_out_V_offset_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [27:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    mem_port_in_V_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    mem_port_in_V_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    mem_port_in_V_blk_n_AW;
wire    ap_CS_fsm_state34;
reg    mem_port_in_V_blk_n_W;
reg    ap_enable_reg_pp3_iter2;
wire    ap_block_pp3_stage0;
reg   [0:0] icmp_ln69_reg_1137;
reg   [0:0] icmp_ln69_reg_1137_pp3_iter1_reg;
reg    mem_port_in_V_blk_n_B;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg    mem_port_in_V_offset_blk_n;
reg    mem_port_out_V_offset_blk_n;
reg   [4:0] phi_ln39_i_i_reg_413;
reg   [4:0] phi_ln43_i_i_reg_424;
reg   [4:0] indvar_flatten_i_reg_435;
reg   [2:0] r_0_0_i_i_reg_446;
reg   [2:0] c_0_0_i_i_reg_457;
reg   [4:0] phi_ln69_i_i_reg_468;
reg   [31:0] mem_port_out_V_offse_reg_890;
reg    ap_block_state1;
wire   [29:0] zext_ln39_1_fu_620_p1;
reg   [29:0] zext_ln39_1_reg_895;
wire   [29:0] add_ln39_fu_624_p2;
reg   [29:0] add_ln39_reg_900;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln39_fu_640_p2;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [4:0] add_ln39_1_fu_646_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [2:0] lshr_ln39_1_i_reg_930;
reg   [2:0] lshr_ln39_1_i_reg_930_pp0_iter1_reg;
wire   [1:0] trunc_ln39_fu_662_p1;
reg   [1:0] trunc_ln39_reg_935;
reg   [1:0] trunc_ln39_reg_935_pp0_iter1_reg;
reg   [63:0] mem_port_out_V_addr_3_reg_939;
wire   [29:0] add_ln43_fu_686_p2;
reg   [29:0] add_ln43_reg_947;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln43_fu_701_p2;
wire    ap_block_state20_pp1_stage0_iter0;
reg    ap_block_state21_pp1_stage0_iter1;
wire    ap_block_state22_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
wire   [4:0] add_ln43_1_fu_707_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [1:0] trunc_ln43_fu_713_p1;
reg   [1:0] trunc_ln43_reg_967;
reg   [1:0] trunc_ln43_reg_967_pp1_iter1_reg;
reg   [1:0] trunc_ln43_3_i_reg_972;
reg   [1:0] trunc_ln43_3_i_reg_972_pp1_iter1_reg;
reg   [63:0] mem_port_out_V_addr_4_reg_976;
wire   [0:0] icmp_ln47_fu_734_p2;
reg   [0:0] icmp_ln47_reg_984;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state24_pp2_stage0_iter0;
wire    ap_block_state25_pp2_stage0_iter1;
wire    ap_block_state26_pp2_stage0_iter2;
wire    ap_block_state27_pp2_stage0_iter3;
wire    ap_block_state28_pp2_stage0_iter4;
wire    ap_block_state29_pp2_stage0_iter5;
wire    ap_block_state30_pp2_stage0_iter6;
wire    ap_block_state31_pp2_stage0_iter7;
wire    ap_block_state32_pp2_stage0_iter8;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln47_reg_984_pp2_iter1_reg;
reg   [0:0] icmp_ln47_reg_984_pp2_iter2_reg;
reg   [0:0] icmp_ln47_reg_984_pp2_iter3_reg;
reg   [0:0] icmp_ln47_reg_984_pp2_iter4_reg;
reg   [0:0] icmp_ln47_reg_984_pp2_iter5_reg;
reg   [0:0] icmp_ln47_reg_984_pp2_iter6_reg;
reg   [0:0] icmp_ln47_reg_984_pp2_iter7_reg;
wire   [4:0] add_ln47_fu_740_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [2:0] select_ln54_fu_758_p3;
reg   [2:0] select_ln54_reg_993;
reg   [2:0] select_ln54_reg_993_pp2_iter1_reg;
reg   [2:0] select_ln54_reg_993_pp2_iter2_reg;
reg   [2:0] select_ln54_reg_993_pp2_iter3_reg;
reg   [2:0] select_ln54_reg_993_pp2_iter4_reg;
reg   [2:0] select_ln54_reg_993_pp2_iter5_reg;
reg   [2:0] select_ln54_reg_993_pp2_iter6_reg;
reg   [2:0] select_ln54_reg_993_pp2_iter7_reg;
wire   [2:0] select_ln54_1_fu_766_p3;
reg   [2:0] select_ln54_1_reg_998;
reg   [2:0] select_ln54_1_reg_998_pp2_iter1_reg;
reg   [2:0] select_ln54_1_reg_998_pp2_iter2_reg;
reg   [2:0] select_ln54_1_reg_998_pp2_iter3_reg;
reg   [2:0] select_ln54_1_reg_998_pp2_iter4_reg;
reg   [2:0] select_ln54_1_reg_998_pp2_iter5_reg;
reg   [2:0] select_ln54_1_reg_998_pp2_iter6_reg;
reg   [2:0] select_ln54_1_reg_998_pp2_iter7_reg;
wire   [63:0] zext_ln54_1_fu_774_p1;
reg   [63:0] zext_ln54_1_reg_1004;
wire   [63:0] zext_ln55_fu_780_p1;
reg   [63:0] zext_ln55_reg_1020;
wire   [2:0] add_ln48_fu_786_p2;
wire   [63:0] mat_a_0_V_q0;
reg  signed [63:0] mat_a_0_V_load_reg_1041;
reg    ap_enable_reg_pp2_iter1;
wire   [63:0] mat_a_1_V_q0;
reg  signed [63:0] mat_a_1_V_load_reg_1046;
wire   [63:0] mat_b_0_V_q0;
reg  signed [63:0] mat_b_0_V_load_reg_1061;
wire   [63:0] mat_b_1_V_q0;
reg  signed [63:0] mat_b_1_V_load_reg_1066;
wire   [63:0] mat_a_2_V_q0;
reg  signed [63:0] mat_a_2_V_load_reg_1081;
reg    ap_enable_reg_pp2_iter2;
wire   [63:0] mat_a_3_V_q0;
reg  signed [63:0] mat_a_3_V_load_reg_1086;
wire   [63:0] mat_b_2_V_q0;
reg  signed [63:0] mat_b_2_V_load_reg_1091;
wire   [63:0] mat_b_3_V_q0;
reg  signed [63:0] mat_b_3_V_load_reg_1096;
wire   [63:0] grp_fu_483_p2;
reg   [63:0] mul_ln209_reg_1101;
wire   [63:0] grp_fu_482_p2;
reg   [63:0] mul_ln209_1_reg_1106;
wire   [63:0] grp_fu_484_p2;
reg   [63:0] mul_ln209_2_reg_1111;
wire   [63:0] grp_fu_479_p2;
reg   [63:0] mul_ln209_3_reg_1116;
wire   [63:0] add_ln700_fu_792_p2;
reg   [63:0] add_ln700_reg_1121;
wire   [29:0] add_ln69_fu_857_p2;
reg   [29:0] add_ln69_reg_1126;
wire    ap_CS_fsm_state33;
wire   [0:0] icmp_ln69_fu_873_p2;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state35_pp3_stage0_iter0;
wire    ap_block_state36_pp3_stage0_iter1;
wire    ap_block_state37_pp3_stage0_iter2;
reg    ap_block_state37_io;
reg    ap_block_pp3_stage0_11001;
wire   [4:0] add_ln69_1_fu_879_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [63:0] mat_p_V_q0;
reg   [63:0] mat_p_V_load_reg_1151;
reg    ap_enable_reg_pp3_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state19;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state20;
reg    ap_enable_reg_pp1_iter2;
wire    ap_CS_fsm_state23;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state24;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter7;
reg    ap_enable_reg_pp2_iter8;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state35;
reg   [1:0] mat_a_0_V_address0;
reg    mat_a_0_V_ce0;
reg    mat_a_0_V_we0;
reg   [1:0] mat_a_1_V_address0;
reg    mat_a_1_V_ce0;
reg    mat_a_1_V_we0;
reg   [1:0] mat_a_2_V_address0;
reg    mat_a_2_V_ce0;
reg    mat_a_2_V_we0;
reg   [1:0] mat_a_3_V_address0;
reg    mat_a_3_V_ce0;
reg    mat_a_3_V_we0;
reg   [1:0] mat_b_0_V_address0;
reg    mat_b_0_V_ce0;
reg    mat_b_0_V_we0;
reg   [1:0] mat_b_1_V_address0;
reg    mat_b_1_V_ce0;
reg    mat_b_1_V_we0;
reg   [1:0] mat_b_2_V_address0;
reg    mat_b_2_V_ce0;
reg    mat_b_2_V_we0;
reg   [1:0] mat_b_3_V_address0;
reg    mat_b_3_V_ce0;
reg    mat_b_3_V_we0;
reg   [3:0] mat_p_V_address0;
reg    mat_p_V_ce0;
reg    mat_p_V_we0;
wire   [63:0] mat_p_V_d0;
reg   [2:0] ap_phi_mux_r_0_0_i_i_phi_fu_450_p4;
wire    ap_block_pp2_stage0;
wire   [63:0] zext_ln39_3_fu_666_p1;
wire   [63:0] zext_ln43_2_fu_727_p1;
wire   [63:0] zext_ln321_1_fu_816_p1;
wire   [63:0] zext_ln69_3_fu_885_p1;
wire   [63:0] zext_ln39_2_fu_630_p1;
wire   [63:0] zext_ln43_1_fu_691_p1;
wire   [63:0] zext_ln69_2_fu_863_p1;
wire    ap_block_pp3_stage0_01001;
wire   [28:0] tmp_fu_596_p4;
wire   [28:0] tmp_1_fu_610_p4;
wire   [29:0] zext_ln39_fu_606_p1;
wire   [28:0] tmp_2_fu_673_p4;
wire   [29:0] zext_ln43_fu_682_p1;
wire   [0:0] icmp_ln48_fu_752_p2;
wire   [2:0] add_ln47_1_fu_746_p2;
wire   [4:0] tmp_5_fu_796_p3;
wire   [5:0] zext_ln54_fu_803_p1;
wire   [5:0] zext_ln321_fu_807_p1;
wire   [5:0] add_ln321_fu_810_p2;
wire   [63:0] add_ln700_1_fu_821_p2;
wire   [28:0] tmp_3_fu_831_p4;
wire   [28:0] tmp_4_fu_844_p4;
wire   [29:0] zext_ln69_1_fu_853_p1;
wire   [29:0] zext_ln69_fu_840_p1;
reg   [27:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 28'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
end

acc_mod_mat_a_0_V #(
    .DataWidth( 64 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
mat_a_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mat_a_0_V_address0),
    .ce0(mat_a_0_V_ce0),
    .we0(mat_a_0_V_we0),
    .d0(mem_port_out_V_addr_3_reg_939),
    .q0(mat_a_0_V_q0)
);

acc_mod_mat_a_0_V #(
    .DataWidth( 64 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
mat_a_1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mat_a_1_V_address0),
    .ce0(mat_a_1_V_ce0),
    .we0(mat_a_1_V_we0),
    .d0(mem_port_out_V_addr_3_reg_939),
    .q0(mat_a_1_V_q0)
);

acc_mod_mat_a_0_V #(
    .DataWidth( 64 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
mat_a_2_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mat_a_2_V_address0),
    .ce0(mat_a_2_V_ce0),
    .we0(mat_a_2_V_we0),
    .d0(mem_port_out_V_addr_3_reg_939),
    .q0(mat_a_2_V_q0)
);

acc_mod_mat_a_0_V #(
    .DataWidth( 64 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
mat_a_3_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mat_a_3_V_address0),
    .ce0(mat_a_3_V_ce0),
    .we0(mat_a_3_V_we0),
    .d0(mem_port_out_V_addr_3_reg_939),
    .q0(mat_a_3_V_q0)
);

acc_mod_mat_a_0_V #(
    .DataWidth( 64 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
mat_b_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mat_b_0_V_address0),
    .ce0(mat_b_0_V_ce0),
    .we0(mat_b_0_V_we0),
    .d0(mem_port_out_V_addr_4_reg_976),
    .q0(mat_b_0_V_q0)
);

acc_mod_mat_a_0_V #(
    .DataWidth( 64 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
mat_b_1_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mat_b_1_V_address0),
    .ce0(mat_b_1_V_ce0),
    .we0(mat_b_1_V_we0),
    .d0(mem_port_out_V_addr_4_reg_976),
    .q0(mat_b_1_V_q0)
);

acc_mod_mat_a_0_V #(
    .DataWidth( 64 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
mat_b_2_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mat_b_2_V_address0),
    .ce0(mat_b_2_V_ce0),
    .we0(mat_b_2_V_we0),
    .d0(mem_port_out_V_addr_4_reg_976),
    .q0(mat_b_2_V_q0)
);

acc_mod_mat_a_0_V #(
    .DataWidth( 64 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
mat_b_3_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mat_b_3_V_address0),
    .ce0(mat_b_3_V_ce0),
    .we0(mat_b_3_V_we0),
    .d0(mem_port_out_V_addr_4_reg_976),
    .q0(mat_b_3_V_q0)
);

acc_mod_mat_p_V #(
    .DataWidth( 64 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
mat_p_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mat_p_V_address0),
    .ce0(mat_p_V_ce0),
    .we0(mat_p_V_we0),
    .d0(mat_p_V_d0),
    .q0(mat_p_V_q0)
);

acc_mul_64s_64s_6bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
acc_mul_64s_64s_6bkb_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mat_b_3_V_load_reg_1096),
    .din1(mat_a_3_V_load_reg_1086),
    .ce(1'b1),
    .dout(grp_fu_479_p2)
);

acc_mul_64s_64s_6bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
acc_mul_64s_64s_6bkb_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mat_b_1_V_load_reg_1066),
    .din1(mat_a_1_V_load_reg_1046),
    .ce(1'b1),
    .dout(grp_fu_482_p2)
);

acc_mul_64s_64s_6bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
acc_mul_64s_64s_6bkb_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mat_b_0_V_load_reg_1061),
    .din1(mat_a_0_V_load_reg_1041),
    .ce(1'b1),
    .dout(grp_fu_483_p2)
);

acc_mul_64s_64s_6bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
acc_mul_64s_64s_6bkb_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mat_b_2_V_load_reg_1091),
    .din1(mat_a_2_V_load_reg_1081),
    .ce(1'b1),
    .dout(grp_fu_484_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((m_axi_mem_port_in_V_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state20) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state20)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state20);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state24) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state23)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state24)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state24);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
        end else if ((1'b1 == ap_CS_fsm_state23)) begin
            ap_enable_reg_pp2_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state35) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((m_axi_mem_port_in_V_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state35)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state35);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if (((m_axi_mem_port_in_V_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        c_0_0_i_i_reg_457 <= 3'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln47_fu_734_p2 == 1'd0))) begin
        c_0_0_i_i_reg_457 <= add_ln48_fu_786_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        indvar_flatten_i_reg_435 <= 5'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln47_fu_734_p2 == 1'd0))) begin
        indvar_flatten_i_reg_435 <= add_ln47_fu_740_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln39_fu_640_p2 == 1'd0))) begin
        phi_ln39_i_i_reg_413 <= add_ln39_1_fu_646_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        phi_ln39_i_i_reg_413 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln43_fu_701_p2 == 1'd0))) begin
        phi_ln43_i_i_reg_424 <= add_ln43_1_fu_707_p2;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        phi_ln43_i_i_reg_424 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln69_fu_873_p2 == 1'd0))) begin
        phi_ln69_i_i_reg_468 <= add_ln69_1_fu_879_p2;
    end else if (((m_axi_mem_port_in_V_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
        phi_ln69_i_i_reg_468 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        r_0_0_i_i_reg_446 <= 3'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln47_reg_984 == 1'd0))) begin
        r_0_0_i_i_reg_446 <= select_ln54_1_reg_998;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (mem_port_out_V_offset_empty_n == 1'b0) | (mem_port_in_V_offset_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln39_reg_900 <= add_ln39_fu_624_p2;
        mem_port_out_V_offse_reg_890 <= mem_port_out_V_offset_dout;
        zext_ln39_1_reg_895[28 : 0] <= zext_ln39_1_fu_620_p1[28 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        add_ln43_reg_947 <= add_ln43_fu_686_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        add_ln69_reg_1126 <= add_ln69_fu_857_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln47_reg_984_pp2_iter6_reg == 1'd0))) begin
        add_ln700_reg_1121 <= add_ln700_fu_792_p2;
        mul_ln209_2_reg_1111 <= grp_fu_484_p2;
        mul_ln209_3_reg_1116 <= grp_fu_479_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln47_reg_984 <= icmp_ln47_fu_734_p2;
        icmp_ln47_reg_984_pp2_iter1_reg <= icmp_ln47_reg_984;
        select_ln54_1_reg_998_pp2_iter1_reg <= select_ln54_1_reg_998;
        select_ln54_reg_993_pp2_iter1_reg <= select_ln54_reg_993;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        icmp_ln47_reg_984_pp2_iter2_reg <= icmp_ln47_reg_984_pp2_iter1_reg;
        icmp_ln47_reg_984_pp2_iter3_reg <= icmp_ln47_reg_984_pp2_iter2_reg;
        icmp_ln47_reg_984_pp2_iter4_reg <= icmp_ln47_reg_984_pp2_iter3_reg;
        icmp_ln47_reg_984_pp2_iter5_reg <= icmp_ln47_reg_984_pp2_iter4_reg;
        icmp_ln47_reg_984_pp2_iter6_reg <= icmp_ln47_reg_984_pp2_iter5_reg;
        icmp_ln47_reg_984_pp2_iter7_reg <= icmp_ln47_reg_984_pp2_iter6_reg;
        select_ln54_1_reg_998_pp2_iter2_reg <= select_ln54_1_reg_998_pp2_iter1_reg;
        select_ln54_1_reg_998_pp2_iter3_reg <= select_ln54_1_reg_998_pp2_iter2_reg;
        select_ln54_1_reg_998_pp2_iter4_reg <= select_ln54_1_reg_998_pp2_iter3_reg;
        select_ln54_1_reg_998_pp2_iter5_reg <= select_ln54_1_reg_998_pp2_iter4_reg;
        select_ln54_1_reg_998_pp2_iter6_reg <= select_ln54_1_reg_998_pp2_iter5_reg;
        select_ln54_1_reg_998_pp2_iter7_reg <= select_ln54_1_reg_998_pp2_iter6_reg;
        select_ln54_reg_993_pp2_iter2_reg <= select_ln54_reg_993_pp2_iter1_reg;
        select_ln54_reg_993_pp2_iter3_reg <= select_ln54_reg_993_pp2_iter2_reg;
        select_ln54_reg_993_pp2_iter4_reg <= select_ln54_reg_993_pp2_iter3_reg;
        select_ln54_reg_993_pp2_iter5_reg <= select_ln54_reg_993_pp2_iter4_reg;
        select_ln54_reg_993_pp2_iter6_reg <= select_ln54_reg_993_pp2_iter5_reg;
        select_ln54_reg_993_pp2_iter7_reg <= select_ln54_reg_993_pp2_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln69_reg_1137 <= icmp_ln69_fu_873_p2;
        icmp_ln69_reg_1137_pp3_iter1_reg <= icmp_ln69_reg_1137;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln39_fu_640_p2 == 1'd0))) begin
        lshr_ln39_1_i_reg_930 <= {{phi_ln39_i_i_reg_413[4:2]}};
        trunc_ln39_reg_935 <= trunc_ln39_fu_662_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lshr_ln39_1_i_reg_930_pp0_iter1_reg <= lshr_ln39_1_i_reg_930;
        mem_port_out_V_addr_3_reg_939 <= m_axi_mem_port_in_V_RDATA;
        trunc_ln39_reg_935_pp0_iter1_reg <= trunc_ln39_reg_935;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln47_reg_984 == 1'd0))) begin
        mat_a_0_V_load_reg_1041 <= mat_a_0_V_q0;
        mat_a_1_V_load_reg_1046 <= mat_a_1_V_q0;
        mat_b_0_V_load_reg_1061 <= mat_b_0_V_q0;
        mat_b_1_V_load_reg_1066 <= mat_b_1_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1) & (icmp_ln47_reg_984_pp2_iter1_reg == 1'd0))) begin
        mat_a_2_V_load_reg_1081 <= mat_a_2_V_q0;
        mat_a_3_V_load_reg_1086 <= mat_a_3_V_q0;
        mat_b_2_V_load_reg_1091 <= mat_b_2_V_q0;
        mat_b_3_V_load_reg_1096 <= mat_b_3_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln69_reg_1137 == 1'd0))) begin
        mat_p_V_load_reg_1151 <= mat_p_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        mem_port_out_V_addr_4_reg_976 <= m_axi_mem_port_in_V_RDATA;
        trunc_ln43_3_i_reg_972_pp1_iter1_reg <= trunc_ln43_3_i_reg_972;
        trunc_ln43_reg_967_pp1_iter1_reg <= trunc_ln43_reg_967;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln47_reg_984_pp2_iter5_reg == 1'd0))) begin
        mul_ln209_1_reg_1106 <= grp_fu_482_p2;
        mul_ln209_reg_1101 <= grp_fu_483_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln47_fu_734_p2 == 1'd0))) begin
        select_ln54_1_reg_998 <= select_ln54_1_fu_766_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln47_fu_734_p2 == 1'd0))) begin
        select_ln54_reg_993 <= select_ln54_fu_758_p3;
        zext_ln54_1_reg_1004[2 : 0] <= zext_ln54_1_fu_774_p1[2 : 0];
        zext_ln55_reg_1020[2 : 0] <= zext_ln55_fu_780_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln43_fu_701_p2 == 1'd0))) begin
        trunc_ln43_3_i_reg_972 <= {{phi_ln43_i_i_reg_424[3:2]}};
        trunc_ln43_reg_967 <= trunc_ln43_fu_713_p1;
    end
end

always @ (*) begin
    if ((icmp_ln39_fu_640_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln43_fu_701_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state20 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state20 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln47_fu_734_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state24 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state24 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln69_fu_873_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state35 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state35 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_mem_port_in_V_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter8 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln47_reg_984 == 1'd0))) begin
        ap_phi_mux_r_0_0_i_i_phi_fu_450_p4 = select_ln54_1_reg_998;
    end else begin
        ap_phi_mux_r_0_0_i_i_phi_fu_450_p4 = r_0_0_i_i_reg_446;
    end
end

always @ (*) begin
    if (((m_axi_mem_port_in_V_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        id_ap_vld = 1'b1;
    end else begin
        id_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_mem_port_in_V_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            m_axi_mem_port_in_V_ARADDR = zext_ln43_1_fu_691_p1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            m_axi_mem_port_in_V_ARADDR = zext_ln39_2_fu_630_p1;
        end else begin
            m_axi_mem_port_in_V_ARADDR = 'bx;
        end
    end else begin
        m_axi_mem_port_in_V_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((m_axi_mem_port_in_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13)) | ((m_axi_mem_port_in_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        m_axi_mem_port_in_V_ARVALID = 1'b1;
    end else begin
        m_axi_mem_port_in_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_mem_port_in_V_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
        m_axi_mem_port_in_V_AWVALID = 1'b1;
    end else begin
        m_axi_mem_port_in_V_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_mem_port_in_V_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
        m_axi_mem_port_in_V_BREADY = 1'b1;
    end else begin
        m_axi_mem_port_in_V_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        m_axi_mem_port_in_V_RREADY = 1'b1;
    end else begin
        m_axi_mem_port_in_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1) & (icmp_ln69_reg_1137_pp3_iter1_reg == 1'd0))) begin
        m_axi_mem_port_in_V_WVALID = 1'b1;
    end else begin
        m_axi_mem_port_in_V_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        mat_a_0_V_address0 = zext_ln54_1_fu_774_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        mat_a_0_V_address0 = zext_ln39_3_fu_666_p1;
    end else begin
        mat_a_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        mat_a_0_V_ce0 = 1'b1;
    end else begin
        mat_a_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln39_reg_935_pp0_iter1_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mat_a_0_V_we0 = 1'b1;
    end else begin
        mat_a_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        mat_a_1_V_address0 = zext_ln54_1_fu_774_p1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        mat_a_1_V_address0 = zext_ln39_3_fu_666_p1;
    end else begin
        mat_a_1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        mat_a_1_V_ce0 = 1'b1;
    end else begin
        mat_a_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln39_reg_935_pp0_iter1_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mat_a_1_V_we0 = 1'b1;
    end else begin
        mat_a_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        mat_a_2_V_address0 = zext_ln54_1_reg_1004;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        mat_a_2_V_address0 = zext_ln39_3_fu_666_p1;
    end else begin
        mat_a_2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        mat_a_2_V_ce0 = 1'b1;
    end else begin
        mat_a_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln39_reg_935_pp0_iter1_reg == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mat_a_2_V_we0 = 1'b1;
    end else begin
        mat_a_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        mat_a_3_V_address0 = zext_ln54_1_reg_1004;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        mat_a_3_V_address0 = zext_ln39_3_fu_666_p1;
    end else begin
        mat_a_3_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        mat_a_3_V_ce0 = 1'b1;
    end else begin
        mat_a_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln39_reg_935_pp0_iter1_reg == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        mat_a_3_V_we0 = 1'b1;
    end else begin
        mat_a_3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        mat_b_0_V_address0 = zext_ln55_fu_780_p1;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        mat_b_0_V_address0 = zext_ln43_2_fu_727_p1;
    end else begin
        mat_b_0_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        mat_b_0_V_ce0 = 1'b1;
    end else begin
        mat_b_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln43_3_i_reg_972_pp1_iter1_reg == 2'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        mat_b_0_V_we0 = 1'b1;
    end else begin
        mat_b_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        mat_b_1_V_address0 = zext_ln55_fu_780_p1;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        mat_b_1_V_address0 = zext_ln43_2_fu_727_p1;
    end else begin
        mat_b_1_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        mat_b_1_V_ce0 = 1'b1;
    end else begin
        mat_b_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln43_3_i_reg_972_pp1_iter1_reg == 2'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        mat_b_1_V_we0 = 1'b1;
    end else begin
        mat_b_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        mat_b_2_V_address0 = zext_ln55_reg_1020;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        mat_b_2_V_address0 = zext_ln43_2_fu_727_p1;
    end else begin
        mat_b_2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        mat_b_2_V_ce0 = 1'b1;
    end else begin
        mat_b_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln43_3_i_reg_972_pp1_iter1_reg == 2'd2) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        mat_b_2_V_we0 = 1'b1;
    end else begin
        mat_b_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        mat_b_3_V_address0 = zext_ln55_reg_1020;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        mat_b_3_V_address0 = zext_ln43_2_fu_727_p1;
    end else begin
        mat_b_3_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        mat_b_3_V_ce0 = 1'b1;
    end else begin
        mat_b_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln43_3_i_reg_972_pp1_iter1_reg == 2'd3) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        mat_b_3_V_we0 = 1'b1;
    end else begin
        mat_b_3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        mat_p_V_address0 = zext_ln69_3_fu_885_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter8 == 1'b1))) begin
        mat_p_V_address0 = zext_ln321_1_fu_816_p1;
    end else begin
        mat_p_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter8 == 1'b1)))) begin
        mat_p_V_ce0 = 1'b1;
    end else begin
        mat_p_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln47_reg_984_pp2_iter7_reg == 1'd0))) begin
        mat_p_V_we0 = 1'b1;
    end else begin
        mat_p_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state2))) begin
        mem_port_in_V_blk_n_AR = m_axi_mem_port_in_V_ARREADY;
    end else begin
        mem_port_in_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        mem_port_in_V_blk_n_AW = m_axi_mem_port_in_V_AWREADY;
    end else begin
        mem_port_in_V_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        mem_port_in_V_blk_n_B = m_axi_mem_port_in_V_BVALID;
    end else begin
        mem_port_in_V_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        mem_port_in_V_blk_n_R = m_axi_mem_port_in_V_RVALID;
    end else begin
        mem_port_in_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b1) & (icmp_ln69_reg_1137_pp3_iter1_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0))) begin
        mem_port_in_V_blk_n_W = m_axi_mem_port_in_V_WREADY;
    end else begin
        mem_port_in_V_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mem_port_in_V_offset_blk_n = mem_port_in_V_offset_empty_n;
    end else begin
        mem_port_in_V_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (mem_port_out_V_offset_empty_n == 1'b0) | (mem_port_in_V_offset_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mem_port_in_V_offset_read = 1'b1;
    end else begin
        mem_port_in_V_offset_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mem_port_out_V_offset_blk_n = mem_port_out_V_offset_empty_n;
    end else begin
        mem_port_out_V_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (mem_port_out_V_offset_empty_n == 1'b0) | (mem_port_in_V_offset_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mem_port_out_V_offset_read = 1'b1;
    end else begin
        mem_port_out_V_offset_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (mem_port_out_V_offset_empty_n == 1'b0) | (mem_port_in_V_offset_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((m_axi_mem_port_in_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln39_fu_640_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln39_fu_640_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((m_axi_mem_port_in_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln43_fu_701_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln43_fu_701_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln47_fu_734_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((ap_enable_reg_pp2_iter7 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter8 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter7 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter8 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (icmp_ln47_fu_734_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            if (((m_axi_mem_port_in_V_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln69_fu_873_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (icmp_ln69_fu_873_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            if (((m_axi_mem_port_in_V_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln321_fu_810_p2 = (zext_ln54_fu_803_p1 + zext_ln321_fu_807_p1);

assign add_ln39_1_fu_646_p2 = (phi_ln39_i_i_reg_413 + 5'd1);

assign add_ln39_fu_624_p2 = (zext_ln39_1_fu_620_p1 + zext_ln39_fu_606_p1);

assign add_ln43_1_fu_707_p2 = (phi_ln43_i_i_reg_424 + 5'd1);

assign add_ln43_fu_686_p2 = (zext_ln39_1_reg_895 + zext_ln43_fu_682_p1);

assign add_ln47_1_fu_746_p2 = (ap_phi_mux_r_0_0_i_i_phi_fu_450_p4 + 3'd1);

assign add_ln47_fu_740_p2 = (indvar_flatten_i_reg_435 + 5'd1);

assign add_ln48_fu_786_p2 = (select_ln54_fu_758_p3 + 3'd1);

assign add_ln69_1_fu_879_p2 = (phi_ln69_i_i_reg_468 + 5'd1);

assign add_ln69_fu_857_p2 = (zext_ln69_1_fu_853_p1 + zext_ln69_fu_840_p1);

assign add_ln700_1_fu_821_p2 = (mul_ln209_3_reg_1116 + mul_ln209_2_reg_1111);

assign add_ln700_fu_792_p2 = (mul_ln209_1_reg_1106 + mul_ln209_reg_1101);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_mem_port_in_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_mem_port_in_V_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((m_axi_mem_port_in_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((m_axi_mem_port_in_V_RVALID == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((1'b1 == ap_block_state37_io) & (ap_enable_reg_pp3_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((1'b1 == ap_block_state37_io) & (ap_enable_reg_pp3_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (mem_port_out_V_offset_empty_n == 1'b0) | (mem_port_in_V_offset_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = (m_axi_mem_port_in_V_RVALID == 1'b0);
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state21_pp1_stage0_iter1 = (m_axi_mem_port_in_V_RVALID == 1'b0);
end

assign ap_block_state22_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp2_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp2_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state37_io = ((m_axi_mem_port_in_V_WREADY == 1'b0) & (icmp_ln69_reg_1137_pp3_iter1_reg == 1'd0));
end

assign ap_block_state37_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign icmp_ln39_fu_640_p2 = ((phi_ln39_i_i_reg_413 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_701_p2 = ((phi_ln43_i_i_reg_424 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_734_p2 = ((indvar_flatten_i_reg_435 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_752_p2 = ((c_0_0_i_i_reg_457 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_873_p2 = ((phi_ln69_i_i_reg_468 == 5'd16) ? 1'b1 : 1'b0);

assign id = 32'd202;

assign m_axi_mem_port_in_V_ARBURST = 2'd0;

assign m_axi_mem_port_in_V_ARCACHE = 4'd0;

assign m_axi_mem_port_in_V_ARID = 1'd0;

assign m_axi_mem_port_in_V_ARLEN = 32'd16;

assign m_axi_mem_port_in_V_ARLOCK = 2'd0;

assign m_axi_mem_port_in_V_ARPROT = 3'd0;

assign m_axi_mem_port_in_V_ARQOS = 4'd0;

assign m_axi_mem_port_in_V_ARREGION = 4'd0;

assign m_axi_mem_port_in_V_ARSIZE = 3'd0;

assign m_axi_mem_port_in_V_ARUSER = 1'd0;

assign m_axi_mem_port_in_V_AWADDR = zext_ln69_2_fu_863_p1;

assign m_axi_mem_port_in_V_AWBURST = 2'd0;

assign m_axi_mem_port_in_V_AWCACHE = 4'd0;

assign m_axi_mem_port_in_V_AWID = 1'd0;

assign m_axi_mem_port_in_V_AWLEN = 32'd16;

assign m_axi_mem_port_in_V_AWLOCK = 2'd0;

assign m_axi_mem_port_in_V_AWPROT = 3'd0;

assign m_axi_mem_port_in_V_AWQOS = 4'd0;

assign m_axi_mem_port_in_V_AWREGION = 4'd0;

assign m_axi_mem_port_in_V_AWSIZE = 3'd0;

assign m_axi_mem_port_in_V_AWUSER = 1'd0;

assign m_axi_mem_port_in_V_WDATA = mat_p_V_load_reg_1151;

assign m_axi_mem_port_in_V_WID = 1'd0;

assign m_axi_mem_port_in_V_WLAST = 1'b0;

assign m_axi_mem_port_in_V_WSTRB = 8'd255;

assign m_axi_mem_port_in_V_WUSER = 1'd0;

assign mat_p_V_d0 = (add_ln700_reg_1121 + add_ln700_1_fu_821_p2);

assign select_ln54_1_fu_766_p3 = ((icmp_ln48_fu_752_p2[0:0] === 1'b1) ? add_ln47_1_fu_746_p2 : ap_phi_mux_r_0_0_i_i_phi_fu_450_p4);

assign select_ln54_fu_758_p3 = ((icmp_ln48_fu_752_p2[0:0] === 1'b1) ? 3'd0 : c_0_0_i_i_reg_457);

assign tmp_1_fu_610_p4 = {{mem_port_in_V_offset_dout[31:3]}};

assign tmp_2_fu_673_p4 = {{args1[31:3]}};

assign tmp_3_fu_831_p4 = {{args2[31:3]}};

assign tmp_4_fu_844_p4 = {{mem_port_out_V_offse_reg_890[31:3]}};

assign tmp_5_fu_796_p3 = {{select_ln54_1_reg_998_pp2_iter7_reg}, {2'd0}};

assign tmp_fu_596_p4 = {{args0[31:3]}};

assign trunc_ln39_fu_662_p1 = phi_ln39_i_i_reg_413[1:0];

assign trunc_ln43_fu_713_p1 = phi_ln43_i_i_reg_424[1:0];

assign zext_ln321_1_fu_816_p1 = add_ln321_fu_810_p2;

assign zext_ln321_fu_807_p1 = select_ln54_reg_993_pp2_iter7_reg;

assign zext_ln39_1_fu_620_p1 = tmp_1_fu_610_p4;

assign zext_ln39_2_fu_630_p1 = add_ln39_reg_900;

assign zext_ln39_3_fu_666_p1 = lshr_ln39_1_i_reg_930_pp0_iter1_reg;

assign zext_ln39_fu_606_p1 = tmp_fu_596_p4;

assign zext_ln43_1_fu_691_p1 = add_ln43_reg_947;

assign zext_ln43_2_fu_727_p1 = trunc_ln43_reg_967_pp1_iter1_reg;

assign zext_ln43_fu_682_p1 = tmp_2_fu_673_p4;

assign zext_ln54_1_fu_774_p1 = select_ln54_1_fu_766_p3;

assign zext_ln54_fu_803_p1 = tmp_5_fu_796_p3;

assign zext_ln55_fu_780_p1 = select_ln54_fu_758_p3;

assign zext_ln69_1_fu_853_p1 = tmp_4_fu_844_p4;

assign zext_ln69_2_fu_863_p1 = add_ln69_reg_1126;

assign zext_ln69_3_fu_885_p1 = phi_ln69_i_i_reg_468;

assign zext_ln69_fu_840_p1 = tmp_3_fu_831_p4;

always @ (posedge ap_clk) begin
    zext_ln39_1_reg_895[29] <= 1'b0;
    zext_ln54_1_reg_1004[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln55_reg_1020[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //acc_mod
